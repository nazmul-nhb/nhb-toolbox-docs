{
  "count": 787,
  "items": [
    {
      "name": "areInvalidNumbers",
      "kind": "FunctionDeclaration",
      "signature": "areInvalidNumbers(numbers)",
      "starter": "import { areInvalidNumbers } from \"nhb-toolbox\";\nconsole.log(areInvalidNumbers(numbers));",
      "shortDoc": "* Checks whether any input is not a finite number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "areInvalidNumbers",
      "kind": "FunctionDeclaration",
      "signature": "areInvalidNumbers(numbers)",
      "starter": "import { areInvalidNumbers } from \"nhb-toolbox\";\nconsole.log(areInvalidNumbers(numbers));",
      "shortDoc": "* Checks whether any input is not a finite number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/guards.d.ts"
    },
    {
      "name": "areNumbersInvalid",
      "kind": "FunctionDeclaration",
      "signature": "areNumbersInvalid(numbers)",
      "starter": "import { areNumbersInvalid } from \"nhb-toolbox\";\nconsole.log(areNumbersInvalid(numbers));",
      "shortDoc": "* Checks whether any input is not a finite number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "averageByField",
      "kind": "FunctionDeclaration",
      "signature": "averageByField(data, field, roundTo)",
      "starter": "import { averageByField } from \"nhb-toolbox\";\nconsole.log(averageByField(data, field, roundTo));",
      "shortDoc": "* Calculates the average of a numeric field across all items.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "averageByField",
      "kind": "FunctionDeclaration",
      "signature": "averageByField(data, field, roundTo)",
      "starter": "import { averageByField } from \"nhb-toolbox\";\nconsole.log(averageByField(data, field, roundTo));",
      "shortDoc": "* Calculates the average of a numeric field across all items.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/calc.d.ts"
    },
    {
      "name": "avgByField",
      "kind": "FunctionDeclaration",
      "signature": "avgByField(data, field, roundTo)",
      "starter": "import { avgByField } from \"nhb-toolbox\";\nconsole.log(avgByField(data, field, roundTo));",
      "shortDoc": "* Calculates the average of a numeric field across all items.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "calculateAverage",
      "kind": "FunctionDeclaration",
      "signature": "calculateAverage(numbers)",
      "starter": "import { calculateAverage } from \"nhb-toolbox\";\nconsole.log(calculateAverage(numbers));",
      "shortDoc": "* Calculates the average of a set of numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "calculatePercentage",
      "kind": "FunctionDeclaration",
      "signature": "calculatePercentage(options)",
      "starter": "import { calculatePercentage } from \"nhb-toolbox\";\nconsole.log(calculatePercentage(options));",
      "shortDoc": "* Performs a percentage-related calculation based on the given mode and inputs.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "calculatePercentage",
      "kind": "FunctionDeclaration",
      "signature": "calculatePercentage(options)",
      "starter": "import { calculatePercentage } from \"nhb-toolbox\";\nconsole.log(calculatePercentage(options));",
      "shortDoc": "* Performs a percentage-related calculation based on the given mode and inputs.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/percent.d.ts"
    },
    {
      "name": "capitalizeString",
      "kind": "FunctionDeclaration",
      "signature": "capitalizeString(string, options)",
      "starter": "import { capitalizeString } from \"nhb-toolbox\";\nconsole.log(capitalizeString(string, options));",
      "shortDoc": "* Utility to convert the first letter of any string to uppercase and the rest lowercase (unless specified).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "capitalizeString",
      "kind": "FunctionDeclaration",
      "signature": "capitalizeString(string, options)",
      "starter": "import { capitalizeString } from \"nhb-toolbox\";\nconsole.log(capitalizeString(string, options));",
      "shortDoc": "* Utility to convert the first letter of any string to uppercase and the rest lowercase (unless specified).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/basics.d.ts"
    },
    {
      "name": "cardinalWordsToOrdinal",
      "kind": "FunctionDeclaration",
      "signature": "cardinalWordsToOrdinal(number)",
      "starter": "import { cardinalWordsToOrdinal } from \"nhb-toolbox\";\nconsole.log(cardinalWordsToOrdinal(number));",
      "shortDoc": "* Converts a number, numeric string, or cardinal word string into its ordinal word representation.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "compareNaturally",
      "kind": "FunctionDeclaration",
      "signature": "compareNaturally(a, b, options)",
      "starter": "import { compareNaturally } from \"nhb-toolbox\";\nconsole.log(compareNaturally(a, b, options));",
      "shortDoc": "* Compare two strings using natural sorting (e.g., \"file2\" < \"file10\").",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "compareSorter",
      "kind": "FunctionDeclaration",
      "signature": "compareSorter(a, b, options)",
      "starter": "import { compareSorter } from \"nhb-toolbox\";\nconsole.log(compareSorter(a, b, options));",
      "shortDoc": "* Compare two strings using natural sorting (e.g., \"file2\" < \"file10\").",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertArrayToString",
      "kind": "FunctionDeclaration",
      "signature": "convertArrayToString(array, options)",
      "starter": "import { convertArrayToString } from \"nhb-toolbox\";\nconsole.log(convertArrayToString(array, options));",
      "shortDoc": "* Converts an array of objects to a string using a specific property (supports nested path to primitive values) and separator.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertArrayToString",
      "kind": "FunctionDeclaration",
      "signature": "convertArrayToString(array, options)",
      "starter": "import { convertArrayToString } from \"nhb-toolbox\";\nconsole.log(convertArrayToString(array, options));",
      "shortDoc": "* Converts an array of objects to a string using a specific property (supports nested path to primitive values) and separator.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "convertColorCode",
      "kind": "FunctionDeclaration",
      "signature": "convertColorCode(color)",
      "starter": "import { convertColorCode } from \"nhb-toolbox\";\nconsole.log(convertColorCode(color));",
      "shortDoc": "* Converts a `Hex` color code to `RGB` and `HSL` formats.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertColorCode",
      "kind": "FunctionDeclaration",
      "signature": "convertColorCode(color)",
      "starter": "import { convertColorCode } from \"nhb-toolbox\";\nconsole.log(convertColorCode(color));",
      "shortDoc": "* Converts a `Hex` color code to `RGB` and `HSL` formats.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertMinutesToHourMinutes",
      "kind": "FunctionDeclaration",
      "signature": "convertMinutesToHourMinutes(minutes)",
      "starter": "import { convertMinutesToHourMinutes } from \"nhb-toolbox\";\nconsole.log(convertMinutesToHourMinutes(minutes));",
      "shortDoc": "* Converts a number of minutes into a time string in \"HH:MM\" format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertMinutesToTime",
      "kind": "FunctionDeclaration",
      "signature": "convertMinutesToTime(minutes)",
      "starter": "import { convertMinutesToTime } from \"nhb-toolbox\";\nconsole.log(convertMinutesToTime(minutes));",
      "shortDoc": "* Converts a number of minutes into a time string in \"HH:MM\" format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertMinutesToTime",
      "kind": "FunctionDeclaration",
      "signature": "convertMinutesToTime(minutes)",
      "starter": "import { convertMinutesToTime } from \"nhb-toolbox\";\nconsole.log(convertMinutesToTime(minutes));",
      "shortDoc": "* Converts a number of minutes into a time string in \"HH:MM\" format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/utils.d.ts"
    },
    {
      "name": "convertMinutesToUTCOffset",
      "kind": "FunctionDeclaration",
      "signature": "convertMinutesToUTCOffset(minutes)",
      "starter": "import { convertMinutesToUTCOffset } from \"nhb-toolbox\";\nconsole.log(convertMinutesToUTCOffset(minutes));",
      "shortDoc": "* Converts a minute-based offset to a UTC offset string in the format `UTC±HH:MM`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertNumberToWords",
      "kind": "FunctionDeclaration",
      "signature": "convertNumberToWords(num)",
      "starter": "import { convertNumberToWords } from \"nhb-toolbox\";\nconsole.log(convertNumberToWords(num));",
      "shortDoc": "* Converts a numeric value into its corresponding English word representation.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertNumberToWordsOrdinal",
      "kind": "FunctionDeclaration",
      "signature": "convertNumberToWordsOrdinal(number)",
      "starter": "import { convertNumberToWordsOrdinal } from \"nhb-toolbox\";\nconsole.log(convertNumberToWordsOrdinal(number));",
      "shortDoc": "* Converts a number, numeric string, or cardinal word string into its ordinal word representation.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertObjectValues",
      "kind": "FunctionDeclaration",
      "signature": "convertObjectValues(data, options)",
      "starter": "import { convertObjectValues } from \"nhb-toolbox\";\nconsole.log(convertObjectValues(data, options));",
      "shortDoc": "* Converts the values of specified keys in an object to numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertObjectValues",
      "kind": "FunctionDeclaration",
      "signature": "convertObjectValues(data, options)",
      "starter": "import { convertObjectValues } from \"nhb-toolbox\";\nconsole.log(convertObjectValues(data, options));",
      "shortDoc": "* Converts the values of specified keys in an object to numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/convert.d.ts"
    },
    {
      "name": "convertStringCase",
      "kind": "FunctionDeclaration",
      "signature": "convertStringCase(value, format, options)",
      "starter": "import { convertStringCase } from \"nhb-toolbox\";\nconsole.log(convertStringCase(value, format, options));",
      "shortDoc": "* Converts a string to a specified case format with advanced handling for word boundaries, punctuation, acronyms, and Unicode characters.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertStringCase",
      "kind": "FunctionDeclaration",
      "signature": "convertStringCase(value, format, options)",
      "starter": "import { convertStringCase } from \"nhb-toolbox\";\nconsole.log(convertStringCase(value, format, options));",
      "shortDoc": "* Converts a string to a specified case format with advanced handling for word boundaries, punctuation, acronyms, and Unicode characters.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/case.d.ts"
    },
    {
      "name": "copyToClipboard",
      "kind": "FunctionDeclaration",
      "signature": "copyToClipboard(text)",
      "starter": "import { copyToClipboard } from \"nhb-toolbox\";\nconsole.log(copyToClipboard(text));",
      "shortDoc": "* Copies text to the clipboard, falling back to legacy methods if needed.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "copyToClipboard",
      "kind": "FunctionDeclaration",
      "signature": "copyToClipboard(text)",
      "starter": "import { copyToClipboard } from \"nhb-toolbox\";\nconsole.log(copyToClipboard(text));",
      "shortDoc": "* Copies text to the clipboard, falling back to legacy methods if needed.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/utils.d.ts"
    },
    {
      "name": "countInstanceMethods",
      "kind": "FunctionDeclaration",
      "signature": "countInstanceMethods(cls)",
      "starter": "import { countInstanceMethods } from \"nhb-toolbox\";\nconsole.log(countInstanceMethods(cls));",
      "shortDoc": "* Counts the number of instance methods defined directly on a class prototype.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "countInstanceMethods",
      "kind": "FunctionDeclaration",
      "signature": "countInstanceMethods(cls)",
      "starter": "import { countInstanceMethods } from \"nhb-toolbox\";\nconsole.log(countInstanceMethods(cls));",
      "shortDoc": "* Counts the number of instance methods defined directly on a class prototype.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "countStaticMethods",
      "kind": "FunctionDeclaration",
      "signature": "countStaticMethods(cls)",
      "starter": "import { countStaticMethods } from \"nhb-toolbox\";\nconsole.log(countStaticMethods(cls));",
      "shortDoc": "* Counts the number of static methods defined directly on a class constructor.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "countStaticMethods",
      "kind": "FunctionDeclaration",
      "signature": "countStaticMethods(cls)",
      "starter": "import { countStaticMethods } from \"nhb-toolbox\";\nconsole.log(countStaticMethods(cls));",
      "shortDoc": "* Counts the number of static methods defined directly on a class constructor.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "countWords",
      "kind": "FunctionDeclaration",
      "signature": "countWords(text)",
      "starter": "import { countWords } from \"nhb-toolbox\";\nconsole.log(countWords(text));",
      "shortDoc": "* Counts the number of words in a string, supporting multiple languages and scripts.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "countWords",
      "kind": "FunctionDeclaration",
      "signature": "countWords(text)",
      "starter": "import { countWords } from \"nhb-toolbox\";\nconsole.log(countWords(text));",
      "shortDoc": "* Counts the number of words in a string, supporting multiple languages and scripts.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/utilities.d.ts"
    },
    {
      "name": "countWordsInString",
      "kind": "FunctionDeclaration",
      "signature": "countWordsInString(text)",
      "starter": "import { countWordsInString } from \"nhb-toolbox\";\nconsole.log(countWordsInString(text));",
      "shortDoc": "* Counts the number of words in a string, supporting multiple languages and scripts.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "createOptionsArray",
      "kind": "FunctionDeclaration",
      "signature": "createOptionsArray(data, config)",
      "starter": "import { createOptionsArray } from \"nhb-toolbox\";\nconsole.log(createOptionsArray(data, config));",
      "shortDoc": "* Converts an array of objects into a formatted array of options.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "createOptionsArray",
      "kind": "FunctionDeclaration",
      "signature": "createOptionsArray(data, config)",
      "starter": "import { createOptionsArray } from \"nhb-toolbox\";\nconsole.log(createOptionsArray(data, config));",
      "shortDoc": "* Converts an array of objects into a formatted array of options.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/transform.d.ts"
    },
    {
      "name": "debounceAction",
      "kind": "FunctionDeclaration",
      "signature": "debounceAction(callback, delay)",
      "starter": "import { debounceAction } from \"nhb-toolbox\";\nconsole.log(debounceAction(callback, delay));",
      "shortDoc": "* A generic debounce function that delays the execution of a callback.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "debounceAction",
      "kind": "FunctionDeclaration",
      "signature": "debounceAction(callback, delay)",
      "starter": "import { debounceAction } from \"nhb-toolbox\";\nconsole.log(debounceAction(callback, delay));",
      "shortDoc": "* A generic debounce function that delays the execution of a callback.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "deepParsePrimitives",
      "kind": "FunctionDeclaration",
      "signature": "deepParsePrimitives(input)",
      "starter": "import { deepParsePrimitives } from \"nhb-toolbox\";\nconsole.log(deepParsePrimitives(input));",
      "shortDoc": "* Recursively parses primitive values inside objects and arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "deepParsePrimitives",
      "kind": "FunctionDeclaration",
      "signature": "deepParsePrimitives(input)",
      "starter": "import { deepParsePrimitives } from \"nhb-toolbox\";\nconsole.log(deepParsePrimitives(input));",
      "shortDoc": "* Recursively parses primitive values inside objects and arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "deleteFields",
      "kind": "FunctionDeclaration",
      "signature": "deleteFields(source, keys)",
      "starter": "import { deleteFields } from \"nhb-toolbox\";\nconsole.log(deleteFields(source, keys));",
      "shortDoc": "* Create a new object by removing specific keys from the source object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "deleteFields",
      "kind": "FunctionDeclaration",
      "signature": "deleteFields(source, keys)",
      "starter": "import { deleteFields } from \"nhb-toolbox\";\nconsole.log(deleteFields(source, keys));",
      "shortDoc": "* Create a new object by removing specific keys from the source object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/convert.d.ts"
    },
    {
      "name": "deleteObjectFields",
      "kind": "FunctionDeclaration",
      "signature": "deleteObjectFields(source, keys)",
      "starter": "import { deleteObjectFields } from \"nhb-toolbox\";\nconsole.log(deleteObjectFields(source, keys));",
      "shortDoc": "* Create a new object by removing specific keys from the source object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "doesReturnPromise",
      "kind": "FunctionDeclaration",
      "signature": "doesReturnPromise(fn)",
      "starter": "import { doesReturnPromise } from \"nhb-toolbox\";\nconsole.log(doesReturnPromise(fn));",
      "shortDoc": "* Type guard to check if a function returns a Promise.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractDuplicates",
      "kind": "FunctionDeclaration",
      "signature": "extractDuplicates(array)",
      "starter": "import { extractDuplicates } from \"nhb-toolbox\";\nconsole.log(extractDuplicates(array));",
      "shortDoc": "* Finds duplicate values in an array, runs deep comparison for objects and arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractDuplicatesFromArray",
      "kind": "FunctionDeclaration",
      "signature": "extractDuplicatesFromArray(array)",
      "starter": "import { extractDuplicatesFromArray } from \"nhb-toolbox\";\nconsole.log(extractDuplicatesFromArray(array));",
      "shortDoc": "* Finds duplicate values in an array, runs deep comparison for objects and arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractEmails",
      "kind": "FunctionDeclaration",
      "signature": "extractEmails(str)",
      "starter": "import { extractEmails } from \"nhb-toolbox\";\nconsole.log(extractEmails(str));",
      "shortDoc": "* Extracts all email addresses from a string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractEmails",
      "kind": "FunctionDeclaration",
      "signature": "extractEmails(str)",
      "starter": "import { extractEmails } from \"nhb-toolbox\";\nconsole.log(extractEmails(str));",
      "shortDoc": "* Extracts all email addresses from a string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/convert.d.ts"
    },
    {
      "name": "extractHourMinute",
      "kind": "FunctionDeclaration",
      "signature": "extractHourMinute(time)",
      "starter": "import { extractHourMinute } from \"nhb-toolbox\";\nconsole.log(extractHourMinute(time));",
      "shortDoc": "* Extracts the hour and minute from a time string in `HH:MM` or `-HH:MM` format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractHourMinute",
      "kind": "FunctionDeclaration",
      "signature": "extractHourMinute(time)",
      "starter": "import { extractHourMinute } from \"nhb-toolbox\";\nconsole.log(extractHourMinute(time));",
      "shortDoc": "* Extracts the hour and minute from a time string in `HH:MM` or `-HH:MM` format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/utils.d.ts"
    },
    {
      "name": "extractMinutesFromUTC",
      "kind": "FunctionDeclaration",
      "signature": "extractMinutesFromUTC(utc)",
      "starter": "import { extractMinutesFromUTC } from \"nhb-toolbox\";\nconsole.log(extractMinutesFromUTC(utc));",
      "shortDoc": "* Converts a UTC value in `UTC-01:30` or `UTC+01:30` format into total minutes in number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractMinutesFromUTC",
      "kind": "FunctionDeclaration",
      "signature": "extractMinutesFromUTC(utc)",
      "starter": "import { extractMinutesFromUTC } from \"nhb-toolbox\";\nconsole.log(extractMinutesFromUTC(utc));",
      "shortDoc": "* Converts a UTC value in `UTC-01:30` or `UTC+01:30` format into total minutes in number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/utils.d.ts"
    },
    {
      "name": "extractMissingElements",
      "kind": "FunctionDeclaration",
      "signature": "extractMissingElements(array1, array2, missingFrom)",
      "starter": "import { extractMissingElements } from \"nhb-toolbox\";\nconsole.log(extractMissingElements(array1, array2, missingFrom));",
      "shortDoc": "* Finds elements missing from one array compared to another using deep comparison.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractTimeFromUTC",
      "kind": "FunctionDeclaration",
      "signature": "extractTimeFromUTC(utc)",
      "starter": "import { extractTimeFromUTC } from \"nhb-toolbox\";\nconsole.log(extractTimeFromUTC(utc));",
      "shortDoc": "* Extract Time in `HH:MM` format from given UTC value.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractTimeFromUTC",
      "kind": "FunctionDeclaration",
      "signature": "extractTimeFromUTC(utc)",
      "starter": "import { extractTimeFromUTC } from \"nhb-toolbox\";\nconsole.log(extractTimeFromUTC(utc));",
      "shortDoc": "* Extract Time in `HH:MM` format from given UTC value.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/utils.d.ts"
    },
    {
      "name": "extractTimeStringFromUTC",
      "kind": "FunctionDeclaration",
      "signature": "extractTimeStringFromUTC(utc)",
      "starter": "import { extractTimeStringFromUTC } from \"nhb-toolbox\";\nconsole.log(extractTimeStringFromUTC(utc));",
      "shortDoc": "* Extract Time in `HH:MM` format from given UTC value.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractTotalMinutesFromTime",
      "kind": "FunctionDeclaration",
      "signature": "extractTotalMinutesFromTime(time)",
      "starter": "import { extractTotalMinutesFromTime } from \"nhb-toolbox\";\nconsole.log(extractTotalMinutesFromTime(time));",
      "shortDoc": "* Converts a time string `HH:MM` or `-HH:MM` into total minutes from `00:00`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractURLs",
      "kind": "FunctionDeclaration",
      "signature": "extractURLs(str)",
      "starter": "import { extractURLs } from \"nhb-toolbox\";\nconsole.log(extractURLs(str));",
      "shortDoc": "* Extracts all URLs from a string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractURLs",
      "kind": "FunctionDeclaration",
      "signature": "extractURLs(str)",
      "starter": "import { extractURLs } from \"nhb-toolbox\";\nconsole.log(extractURLs(str));",
      "shortDoc": "* Extracts all URLs from a string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/convert.d.ts"
    },
    {
      "name": "fibonacciGenerator",
      "kind": "FunctionDeclaration",
      "signature": "fibonacciGenerator(limit, onYield)",
      "starter": "import { fibonacciGenerator } from \"nhb-toolbox\";\nconsole.log(fibonacciGenerator(limit, onYield));",
      "shortDoc": "* Generator function for Fibonacci sequence up to a given limit.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "fibonacciGenerator",
      "kind": "FunctionDeclaration",
      "signature": "fibonacciGenerator(limit, onYield)",
      "starter": "import { fibonacciGenerator } from \"nhb-toolbox\";\nconsole.log(fibonacciGenerator(limit, onYield));",
      "shortDoc": "* Generator function for Fibonacci sequence up to a given limit.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/fibonacci.d.ts"
    },
    {
      "name": "findMissingElements",
      "kind": "FunctionDeclaration",
      "signature": "findMissingElements(array1, array2, missingFrom)",
      "starter": "import { findMissingElements } from \"nhb-toolbox\";\nconsole.log(findMissingElements(array1, array2, missingFrom));",
      "shortDoc": "* Finds elements missing from one array compared to another using deep comparison.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "findMissingElements",
      "kind": "FunctionDeclaration",
      "signature": "findMissingElements(array1, array2, missingFrom)",
      "starter": "import { findMissingElements } from \"nhb-toolbox\";\nconsole.log(findMissingElements(array1, array2, missingFrom));",
      "shortDoc": "* Finds elements missing from one array compared to another using deep comparison.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/transform.d.ts"
    },
    {
      "name": "formatNumberWithPluralUnit",
      "kind": "FunctionDeclaration",
      "signature": "formatNumberWithPluralUnit(count, unit, withNumber)",
      "starter": "import { formatNumberWithPluralUnit } from \"nhb-toolbox\";\nconsole.log(formatNumberWithPluralUnit(count, unit, withNumber));",
      "shortDoc": "* Returns a grammatically correct unit string, optionally prefixed with the number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "formatUnitWithPlural",
      "kind": "FunctionDeclaration",
      "signature": "formatUnitWithPlural(count, unit, withNumber)",
      "starter": "import { formatUnitWithPlural } from \"nhb-toolbox\";\nconsole.log(formatUnitWithPlural(count, unit, withNumber));",
      "shortDoc": "* Returns a grammatically correct unit string, optionally prefixed with the number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "formatUnitWithPlural",
      "kind": "FunctionDeclaration",
      "signature": "formatUnitWithPlural(count, unit, withNumber)",
      "starter": "import { formatUnitWithPlural } from \"nhb-toolbox\";\nconsole.log(formatUnitWithPlural(count, unit, withNumber));",
      "shortDoc": "* Returns a grammatically correct unit string, optionally prefixed with the number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/convert.d.ts"
    },
    {
      "name": "formatUTCOffset",
      "kind": "FunctionDeclaration",
      "signature": "formatUTCOffset(minutes)",
      "starter": "import { formatUTCOffset } from \"nhb-toolbox\";\nconsole.log(formatUTCOffset(minutes));",
      "shortDoc": "* Converts a minute-based offset to a UTC offset string in the format `UTC±HH:MM`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "formatUTCOffset",
      "kind": "FunctionDeclaration",
      "signature": "formatUTCOffset(minutes)",
      "starter": "import { formatUTCOffset } from \"nhb-toolbox\";\nconsole.log(formatUTCOffset(minutes));",
      "shortDoc": "* Converts a minute-based offset to a UTC offset string in the format `UTC±HH:MM`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/utils.d.ts"
    },
    {
      "name": "formatWithPlural",
      "kind": "FunctionDeclaration",
      "signature": "formatWithPlural(count, unit, withNumber)",
      "starter": "import { formatWithPlural } from \"nhb-toolbox\";\nconsole.log(formatWithPlural(count, unit, withNumber));",
      "shortDoc": "* Returns a grammatically correct unit string, optionally prefixed with the number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "generateAnagrams",
      "kind": "FunctionDeclaration",
      "signature": "generateAnagrams(word, limit)",
      "starter": "import { generateAnagrams } from \"nhb-toolbox\";\nconsole.log(generateAnagrams(word, limit));",
      "shortDoc": "* Utility to generate unique anagrams of a word.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "generateAnagrams",
      "kind": "FunctionDeclaration",
      "signature": "generateAnagrams(word, limit)",
      "starter": "import { generateAnagrams } from \"nhb-toolbox\";\nconsole.log(generateAnagrams(word, limit));",
      "shortDoc": "* Utility to generate unique anagrams of a word.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/anagram.d.ts"
    },
    {
      "name": "generateFibonacci",
      "kind": "FunctionDeclaration",
      "signature": "generateFibonacci(limit, onYield)",
      "starter": "import { generateFibonacci } from \"nhb-toolbox\";\nconsole.log(generateFibonacci(limit, onYield));",
      "shortDoc": "* Generator function for Fibonacci sequence up to a given limit.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "generateGreeting",
      "kind": "FunctionDeclaration",
      "signature": "generateGreeting(configs)",
      "starter": "import { generateGreeting } from \"nhb-toolbox\";\nconsole.log(generateGreeting(configs));",
      "shortDoc": "* Returns a greeting message based on the provided time or current time.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getAverage",
      "kind": "FunctionDeclaration",
      "signature": "getAverage(numbers)",
      "starter": "import { getAverage } from \"nhb-toolbox\";\nconsole.log(getAverage(numbers));",
      "shortDoc": "* Calculates the average of a set of numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getAverage",
      "kind": "FunctionDeclaration",
      "signature": "getAverage(numbers)",
      "starter": "import { getAverage } from \"nhb-toolbox\";\nconsole.log(getAverage(numbers));",
      "shortDoc": "* Calculates the average of a set of numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/basics.d.ts"
    },
    {
      "name": "getAverageOfNumbers",
      "kind": "FunctionDeclaration",
      "signature": "getAverageOfNumbers(numbers)",
      "starter": "import { getAverageOfNumbers } from \"nhb-toolbox\";\nconsole.log(getAverageOfNumbers(numbers));",
      "shortDoc": "* Calculates the average of a set of numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getClassDetails",
      "kind": "FunctionDeclaration",
      "signature": "getClassDetails(cls)",
      "starter": "import { getClassDetails } from \"nhb-toolbox\";\nconsole.log(getClassDetails(cls));",
      "shortDoc": "* Gathers detailed information about the instance and static methods of a class.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getClassDetails",
      "kind": "FunctionDeclaration",
      "signature": "getClassDetails(cls)",
      "starter": "import { getClassDetails } from \"nhb-toolbox\";\nconsole.log(getClassDetails(cls));",
      "shortDoc": "* Gathers detailed information about the instance and static methods of a class.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "getColorForInitial",
      "kind": "FunctionDeclaration",
      "signature": "getColorForInitial(input, opacity)",
      "starter": "import { getColorForInitial } from \"nhb-toolbox\";\nconsole.log(getColorForInitial(input, opacity));",
      "shortDoc": "* Generates a hex color based on the first character (initial) of a string or number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getColorForInitial",
      "kind": "FunctionDeclaration",
      "signature": "getColorForInitial(input, opacity)",
      "starter": "import { getColorForInitial } from \"nhb-toolbox\";\nconsole.log(getColorForInitial(input, opacity));",
      "shortDoc": "* Generates a hex color based on the first character (initial) of a string or number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/initials.d.ts"
    },
    {
      "name": "getCurrentDateTime",
      "kind": "FunctionDeclaration",
      "signature": "getCurrentDateTime()",
      "starter": "import { getCurrentDateTime } from \"nhb-toolbox\";\nconsole.log(getCurrentDateTime());",
      "shortDoc": "* Returns the current date and time as `Date` object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getCurrentDateTime",
      "kind": "FunctionDeclaration",
      "signature": "getCurrentDateTime()",
      "starter": "import { getCurrentDateTime } from \"nhb-toolbox\";\nconsole.log(getCurrentDateTime());",
      "shortDoc": "* Returns the current date and time as `Date` object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/utils.d.ts"
    },
    {
      "name": "getCurrentTime",
      "kind": "FunctionDeclaration",
      "signature": "getCurrentTime()",
      "starter": "import { getCurrentTime } from \"nhb-toolbox\";\nconsole.log(getCurrentTime());",
      "shortDoc": "* Returns the current date and time as `Date` object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getDuplicates",
      "kind": "FunctionDeclaration",
      "signature": "getDuplicates(array)",
      "starter": "import { getDuplicates } from \"nhb-toolbox\";\nconsole.log(getDuplicates(array));",
      "shortDoc": "* Finds duplicate values in an array, runs deep comparison for objects and arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getDuplicates",
      "kind": "FunctionDeclaration",
      "signature": "getDuplicates(array)",
      "starter": "import { getDuplicates } from \"nhb-toolbox\";\nconsole.log(getDuplicates(array));",
      "shortDoc": "* Finds duplicate values in an array, runs deep comparison for objects and arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/transform.d.ts"
    },
    {
      "name": "getDuplicatesFromArray",
      "kind": "FunctionDeclaration",
      "signature": "getDuplicatesFromArray(array)",
      "starter": "import { getDuplicatesFromArray } from \"nhb-toolbox\";\nconsole.log(getDuplicatesFromArray(array));",
      "shortDoc": "* Finds duplicate values in an array, runs deep comparison for objects and arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getFibonacci",
      "kind": "FunctionDeclaration",
      "signature": "getFibonacci(limit)",
      "starter": "import { getFibonacci } from \"nhb-toolbox\";\nconsole.log(getFibonacci(limit));",
      "shortDoc": "* Generates the first `limit` Fibonacci numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getFibonacciNumbers",
      "kind": "FunctionDeclaration",
      "signature": "getFibonacciNumbers(limit)",
      "starter": "import { getFibonacciNumbers } from \"nhb-toolbox\";\nconsole.log(getFibonacciNumbers(limit));",
      "shortDoc": "* Generates the first `limit` Fibonacci numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getFibonacciSeries",
      "kind": "FunctionDeclaration",
      "signature": "getFibonacciSeries(limit)",
      "starter": "import { getFibonacciSeries } from \"nhb-toolbox\";\nconsole.log(getFibonacciSeries(limit));",
      "shortDoc": "* Generates the first `limit` Fibonacci numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getFibonacciSeries",
      "kind": "FunctionDeclaration",
      "signature": "getFibonacciSeries(limit)",
      "starter": "import { getFibonacciSeries } from \"nhb-toolbox\";\nconsole.log(getFibonacciSeries(limit));",
      "shortDoc": "* Generates the first `limit` Fibonacci numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/fibonacci.d.ts"
    },
    {
      "name": "getFibonacciSeriesMemo",
      "kind": "FunctionDeclaration",
      "signature": "getFibonacciSeriesMemo(limit)",
      "starter": "import { getFibonacciSeriesMemo } from \"nhb-toolbox\";\nconsole.log(getFibonacciSeriesMemo(limit));",
      "shortDoc": "* Generates the first `limit` Fibonacci numbers using recursion with memoization.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getFibonacciSeriesMemo",
      "kind": "FunctionDeclaration",
      "signature": "getFibonacciSeriesMemo(limit)",
      "starter": "import { getFibonacciSeriesMemo } from \"nhb-toolbox\";\nconsole.log(getFibonacciSeriesMemo(limit));",
      "shortDoc": "* Generates the first `limit` Fibonacci numbers using recursion with memoization.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/fibonacci.d.ts"
    },
    {
      "name": "getGreeting",
      "kind": "FunctionDeclaration",
      "signature": "getGreeting(configs)",
      "starter": "import { getGreeting } from \"nhb-toolbox\";\nconsole.log(getGreeting(configs));",
      "shortDoc": "* Returns a greeting message based on the provided time or current time.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getGreeting",
      "kind": "FunctionDeclaration",
      "signature": "getGreeting(configs)",
      "starter": "import { getGreeting } from \"nhb-toolbox\";\nconsole.log(getGreeting(configs));",
      "shortDoc": "* Returns a greeting message based on the provided time or current time.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/greet.d.ts"
    },
    {
      "name": "getHourMinutesFromMinutes",
      "kind": "FunctionDeclaration",
      "signature": "getHourMinutesFromMinutes(minutes)",
      "starter": "import { getHourMinutesFromMinutes } from \"nhb-toolbox\";\nconsole.log(getHourMinutesFromMinutes(minutes));",
      "shortDoc": "* Converts a number of minutes into a time string in \"HH:MM\" format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getInstanceGetterNames",
      "kind": "FunctionDeclaration",
      "signature": "getInstanceGetterNames(cls)",
      "starter": "import { getInstanceGetterNames } from \"nhb-toolbox\";\nconsole.log(getInstanceGetterNames(cls));",
      "shortDoc": "* Retrieves the names of all instance getters defined directly on a class prototype.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "getInstanceMethodNames",
      "kind": "FunctionDeclaration",
      "signature": "getInstanceMethodNames(cls)",
      "starter": "import { getInstanceMethodNames } from \"nhb-toolbox\";\nconsole.log(getInstanceMethodNames(cls));",
      "shortDoc": "* Retrieves the names of all instance methods defined directly on a class prototype.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getInstanceMethodNames",
      "kind": "FunctionDeclaration",
      "signature": "getInstanceMethodNames(cls)",
      "starter": "import { getInstanceMethodNames } from \"nhb-toolbox\";\nconsole.log(getInstanceMethodNames(cls));",
      "shortDoc": "* Retrieves the names of all instance methods defined directly on a class prototype.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "getInstanceMethodsCount",
      "kind": "FunctionDeclaration",
      "signature": "getInstanceMethodsCount(cls)",
      "starter": "import { getInstanceMethodsCount } from \"nhb-toolbox\";\nconsole.log(getInstanceMethodsCount(cls));",
      "shortDoc": "* Counts the number of instance methods defined directly on a class prototype.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getMemoizedFibonacci",
      "kind": "FunctionDeclaration",
      "signature": "getMemoizedFibonacci(limit)",
      "starter": "import { getMemoizedFibonacci } from \"nhb-toolbox\";\nconsole.log(getMemoizedFibonacci(limit));",
      "shortDoc": "* Generates the first `limit` Fibonacci numbers using recursion with memoization.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getMemoizedFibonacciSeries",
      "kind": "FunctionDeclaration",
      "signature": "getMemoizedFibonacciSeries(limit)",
      "starter": "import { getMemoizedFibonacciSeries } from \"nhb-toolbox\";\nconsole.log(getMemoizedFibonacciSeries(limit));",
      "shortDoc": "* Generates the first `limit` Fibonacci numbers using recursion with memoization.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getMinutesFromUTC",
      "kind": "FunctionDeclaration",
      "signature": "getMinutesFromUTC(utc)",
      "starter": "import { getMinutesFromUTC } from \"nhb-toolbox\";\nconsole.log(getMinutesFromUTC(utc));",
      "shortDoc": "* Converts a UTC value in `UTC-01:30` or `UTC+01:30` format into total minutes in number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getMissingElements",
      "kind": "FunctionDeclaration",
      "signature": "getMissingElements(array1, array2, missingFrom)",
      "starter": "import { getMissingElements } from \"nhb-toolbox\";\nconsole.log(getMissingElements(array1, array2, missingFrom));",
      "shortDoc": "* Finds elements missing from one array compared to another using deep comparison.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getNthFibonacci",
      "kind": "FunctionDeclaration",
      "signature": "getNthFibonacci(index)",
      "starter": "import { getNthFibonacci } from \"nhb-toolbox\";\nconsole.log(getNthFibonacci(index));",
      "shortDoc": "* Calculates the `n`th Fibonacci number using optimized space.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getNthFibonacci",
      "kind": "FunctionDeclaration",
      "signature": "getNthFibonacci(index)",
      "starter": "import { getNthFibonacci } from \"nhb-toolbox\";\nconsole.log(getNthFibonacci(index));",
      "shortDoc": "* Calculates the `n`th Fibonacci number using optimized space.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/fibonacci.d.ts"
    },
    {
      "name": "getNumbersInRange",
      "kind": "FunctionDeclaration",
      "signature": "getNumbersInRange(type, options)",
      "starter": "import { getNumbersInRange } from \"nhb-toolbox\";\nconsole.log(getNumbersInRange(type, options));",
      "shortDoc": "* Function to get numbers within a range based on the provided `NumberType` and options.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getNumbersInRange",
      "kind": "FunctionDeclaration",
      "signature": "getNumbersInRange(type, options)",
      "starter": "import { getNumbersInRange } from \"nhb-toolbox\";\nconsole.log(getNumbersInRange(type, options));",
      "shortDoc": "* Function to get numbers within a range based on the provided `NumberType` and options.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/range.d.ts"
    },
    {
      "name": "getQueryParams",
      "kind": "FunctionDeclaration",
      "signature": "getQueryParams()",
      "starter": "import { getQueryParams } from \"nhb-toolbox\";\nconsole.log(getQueryParams());",
      "shortDoc": "* Get query params as standard `JavaScript` Object `Record<string, string>`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getQueryParams",
      "kind": "FunctionDeclaration",
      "signature": "getQueryParams()",
      "starter": "import { getQueryParams } from \"nhb-toolbox\";\nconsole.log(getQueryParams());",
      "shortDoc": "* Get query params as standard `JavaScript` Object `Record<string, string>`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/query.d.ts"
    },
    {
      "name": "getStaticGetterNames",
      "kind": "FunctionDeclaration",
      "signature": "getStaticGetterNames(cls)",
      "starter": "import { getStaticGetterNames } from \"nhb-toolbox\";\nconsole.log(getStaticGetterNames(cls));",
      "shortDoc": "* Retrieves the names of all static getters defined directly on a class constructor.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "getStaticMethodNames",
      "kind": "FunctionDeclaration",
      "signature": "getStaticMethodNames(cls)",
      "starter": "import { getStaticMethodNames } from \"nhb-toolbox\";\nconsole.log(getStaticMethodNames(cls));",
      "shortDoc": "* Retrieves the names of all static methods defined directly on a class constructor.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getStaticMethodNames",
      "kind": "FunctionDeclaration",
      "signature": "getStaticMethodNames(cls)",
      "starter": "import { getStaticMethodNames } from \"nhb-toolbox\";\nconsole.log(getStaticMethodNames(cls));",
      "shortDoc": "* Retrieves the names of all static methods defined directly on a class constructor.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "getStaticMethodsCount",
      "kind": "FunctionDeclaration",
      "signature": "getStaticMethodsCount(cls)",
      "starter": "import { getStaticMethodsCount } from \"nhb-toolbox\";\nconsole.log(getStaticMethodsCount(cls));",
      "shortDoc": "* Counts the number of static methods defined directly on a class constructor.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getSumOfNumbers",
      "kind": "FunctionDeclaration",
      "signature": "getSumOfNumbers(numbers)",
      "starter": "import { getSumOfNumbers } from \"nhb-toolbox\";\nconsole.log(getSumOfNumbers(numbers));",
      "shortDoc": "* Sums up numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getTimeFromMinutes",
      "kind": "FunctionDeclaration",
      "signature": "getTimeFromMinutes(minutes)",
      "starter": "import { getTimeFromMinutes } from \"nhb-toolbox\";\nconsole.log(getTimeFromMinutes(minutes));",
      "shortDoc": "* Converts a number of minutes into a time string in \"HH:MM\" format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getTimeStringFromUTC",
      "kind": "FunctionDeclaration",
      "signature": "getTimeStringFromUTC(utc)",
      "starter": "import { getTimeStringFromUTC } from \"nhb-toolbox\";\nconsole.log(getTimeStringFromUTC(utc));",
      "shortDoc": "* Extract Time in `HH:MM` format from given UTC value.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getTotalMinutes",
      "kind": "FunctionDeclaration",
      "signature": "getTotalMinutes(time)",
      "starter": "import { getTotalMinutes } from \"nhb-toolbox\";\nconsole.log(getTotalMinutes(time));",
      "shortDoc": "* Converts a time string `HH:MM` or `-HH:MM` into total minutes from `00:00`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getTotalMinutes",
      "kind": "FunctionDeclaration",
      "signature": "getTotalMinutes(time)",
      "starter": "import { getTotalMinutes } from \"nhb-toolbox\";\nconsole.log(getTotalMinutes(time));",
      "shortDoc": "* Converts a time string `HH:MM` or `-HH:MM` into total minutes from `00:00`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/utils.d.ts"
    },
    {
      "name": "getTotalMinutesFromTime",
      "kind": "FunctionDeclaration",
      "signature": "getTotalMinutesFromTime(time)",
      "starter": "import { getTotalMinutesFromTime } from \"nhb-toolbox\";\nconsole.log(getTotalMinutesFromTime(time));",
      "shortDoc": "* Converts a time string `HH:MM` or `-HH:MM` into total minutes from `00:00`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getTotalMinutesFromUTC",
      "kind": "FunctionDeclaration",
      "signature": "getTotalMinutesFromUTC(utc)",
      "starter": "import { getTotalMinutesFromUTC } from \"nhb-toolbox\";\nconsole.log(getTotalMinutesFromUTC(utc));",
      "shortDoc": "* Converts a UTC value in `UTC-01:30` or `UTC+01:30` format into total minutes in number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "greet",
      "kind": "FunctionDeclaration",
      "signature": "greet(configs)",
      "starter": "import { greet } from \"nhb-toolbox\";\nconsole.log(greet(configs));",
      "shortDoc": "* Returns a greeting message based on the provided time or current time.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "groupAndAverageByField",
      "kind": "FunctionDeclaration",
      "signature": "groupAndAverageByField(data, groupBy, averageBy, roundTo)",
      "starter": "import { groupAndAverageByField } from \"nhb-toolbox\";\nconsole.log(groupAndAverageByField(data, groupBy, averageBy, roundTo));",
      "shortDoc": "* Groups an array of objects by a primitive field and averages another numeric field per group.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "groupAndAverageByField",
      "kind": "FunctionDeclaration",
      "signature": "groupAndAverageByField(data, groupBy, averageBy, roundTo)",
      "starter": "import { groupAndAverageByField } from \"nhb-toolbox\";\nconsole.log(groupAndAverageByField(data, groupBy, averageBy, roundTo));",
      "shortDoc": "* Groups an array of objects by a primitive field and averages another numeric field per group.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/calc.d.ts"
    },
    {
      "name": "groupAndAvgByField",
      "kind": "FunctionDeclaration",
      "signature": "groupAndAvgByField(data, groupBy, averageBy, roundTo)",
      "starter": "import { groupAndAvgByField } from \"nhb-toolbox\";\nconsole.log(groupAndAvgByField(data, groupBy, averageBy, roundTo));",
      "shortDoc": "* Groups an array of objects by a primitive field and averages another numeric field per group.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "groupAndSumByField",
      "kind": "FunctionDeclaration",
      "signature": "groupAndSumByField(data, groupBy, sumBy, roundTo)",
      "starter": "import { groupAndSumByField } from \"nhb-toolbox\";\nconsole.log(groupAndSumByField(data, groupBy, sumBy, roundTo));",
      "shortDoc": "* Groups an array of objects by a primitive field and sums another numeric field per group.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "groupAndSumByField",
      "kind": "FunctionDeclaration",
      "signature": "groupAndSumByField(data, groupBy, sumBy, roundTo)",
      "starter": "import { groupAndSumByField } from \"nhb-toolbox\";\nconsole.log(groupAndSumByField(data, groupBy, sumBy, roundTo));",
      "shortDoc": "* Groups an array of objects by a primitive field and sums another numeric field per group.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/calc.d.ts"
    },
    {
      "name": "groupArrayByProperty",
      "kind": "FunctionDeclaration",
      "signature": "groupArrayByProperty(source, property)",
      "starter": "import { groupArrayByProperty } from \"nhb-toolbox\";\nconsole.log(groupArrayByProperty(source, property));",
      "shortDoc": "* Group an array of objects by a specified key, returning only arrays of grouped objects.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isArray",
      "kind": "FunctionDeclaration",
      "signature": "isArray(value)",
      "starter": "import { isArray } from \"nhb-toolbox\";\nconsole.log(isArray(value));",
      "shortDoc": "* Type guard to check if a value is an array.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isArray",
      "kind": "FunctionDeclaration",
      "signature": "isArray(value)",
      "starter": "import { isArray } from \"nhb-toolbox\";\nconsole.log(isArray(value));",
      "shortDoc": "* Type guard to check if a value is an array.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isArrayOfType",
      "kind": "FunctionDeclaration",
      "signature": "isArrayOfType(value, typeCheck)",
      "starter": "import { isArrayOfType } from \"nhb-toolbox\";\nconsole.log(isArrayOfType(value, typeCheck));",
      "shortDoc": "* Type guard to check if a value is an array of a specific type.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isArrayOfType",
      "kind": "FunctionDeclaration",
      "signature": "isArrayOfType(value, typeCheck)",
      "starter": "import { isArrayOfType } from \"nhb-toolbox\";\nconsole.log(isArrayOfType(value, typeCheck));",
      "shortDoc": "* Type guard to check if a value is an array of a specific type.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isArrayWithLength",
      "kind": "FunctionDeclaration",
      "signature": "isArrayWithLength(value)",
      "starter": "import { isArrayWithLength } from \"nhb-toolbox\";\nconsole.log(isArrayWithLength(value));",
      "shortDoc": "* Type guard to check if a value is an array with length.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isBase64",
      "kind": "FunctionDeclaration",
      "signature": "isBase64(value)",
      "starter": "import { isBase64 } from \"nhb-toolbox\";\nconsole.log(isBase64(value));",
      "shortDoc": "* Type guard to check if a value is a valid Base64 encoded string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isBase64",
      "kind": "FunctionDeclaration",
      "signature": "isBase64(value)",
      "starter": "import { isBase64 } from \"nhb-toolbox\";\nconsole.log(isBase64(value));",
      "shortDoc": "* Type guard to check if a value is a valid Base64 encoded string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isBigInt",
      "kind": "FunctionDeclaration",
      "signature": "isBigInt(value)",
      "starter": "import { isBigInt } from \"nhb-toolbox\";\nconsole.log(isBigInt(value));",
      "shortDoc": "* Type guard to check if a value is a BigInt.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isBigInt",
      "kind": "FunctionDeclaration",
      "signature": "isBigInt(value)",
      "starter": "import { isBigInt } from \"nhb-toolbox\";\nconsole.log(isBigInt(value));",
      "shortDoc": "* Type guard to check if a value is a BigInt.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isBoolean",
      "kind": "FunctionDeclaration",
      "signature": "isBoolean(value)",
      "starter": "import { isBoolean } from \"nhb-toolbox\";\nconsole.log(isBoolean(value));",
      "shortDoc": "* Type guard to check if a value is a boolean.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isBoolean",
      "kind": "FunctionDeclaration",
      "signature": "isBoolean(value)",
      "starter": "import { isBoolean } from \"nhb-toolbox\";\nconsole.log(isBoolean(value));",
      "shortDoc": "* Type guard to check if a value is a boolean.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isBrowser",
      "kind": "FunctionDeclaration",
      "signature": "isBrowser()",
      "starter": "import { isBrowser } from \"nhb-toolbox\";\nconsole.log(isBrowser());",
      "shortDoc": "* Type guard to check if the code is running in a browser environment.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isBrowser",
      "kind": "FunctionDeclaration",
      "signature": "isBrowser()",
      "starter": "import { isBrowser } from \"nhb-toolbox\";\nconsole.log(isBrowser());",
      "shortDoc": "* Type guard to check if the code is running in a browser environment.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isCamelCase",
      "kind": "FunctionDeclaration",
      "signature": "isCamelCase(str)",
      "starter": "import { isCamelCase } from \"nhb-toolbox\";\nconsole.log(isCamelCase(str));",
      "shortDoc": "* Checks if a string is in camelCase format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isCamelCase",
      "kind": "FunctionDeclaration",
      "signature": "isCamelCase(str)",
      "starter": "import { isCamelCase } from \"nhb-toolbox\";\nconsole.log(isCamelCase(str));",
      "shortDoc": "* Checks if a string is in camelCase format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/guards.d.ts"
    },
    {
      "name": "isCustomFile",
      "kind": "FunctionDeclaration",
      "signature": "isCustomFile(value)",
      "starter": "import { isCustomFile } from \"nhb-toolbox\";\nconsole.log(isCustomFile(value));",
      "shortDoc": "* Checks if a given value is a `CustomFile`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isCustomFile",
      "kind": "FunctionDeclaration",
      "signature": "isCustomFile(value)",
      "starter": "import { isCustomFile } from \"nhb-toolbox\";\nconsole.log(isCustomFile(value));",
      "shortDoc": "* Checks if a given value is a `CustomFile`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/guards.d.ts"
    },
    {
      "name": "isCustomFileArray",
      "kind": "FunctionDeclaration",
      "signature": "isCustomFileArray(value)",
      "starter": "import { isCustomFileArray } from \"nhb-toolbox\";\nconsole.log(isCustomFileArray(value));",
      "shortDoc": "* Checks if a given value is an array of `CustomFile` objects.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isCustomFileArray",
      "kind": "FunctionDeclaration",
      "signature": "isCustomFileArray(value)",
      "starter": "import { isCustomFileArray } from \"nhb-toolbox\";\nconsole.log(isCustomFileArray(value));",
      "shortDoc": "* Checks if a given value is an array of `CustomFile` objects.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/guards.d.ts"
    },
    {
      "name": "isDate",
      "kind": "FunctionDeclaration",
      "signature": "isDate(value)",
      "starter": "import { isDate } from \"nhb-toolbox\";\nconsole.log(isDate(value));",
      "shortDoc": "* Type guard to check if a value is a Date object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isDate",
      "kind": "FunctionDeclaration",
      "signature": "isDate(value)",
      "starter": "import { isDate } from \"nhb-toolbox\";\nconsole.log(isDate(value));",
      "shortDoc": "* Type guard to check if a value is a Date object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isDateLike",
      "kind": "FunctionDeclaration",
      "signature": "isDateLike(value)",
      "starter": "import { isDateLike } from \"nhb-toolbox\";\nconsole.log(isDateLike(value));",
      "shortDoc": "* Checks if a value is a date-like object from `Date`, `Chronos`, `Moment.js`, `Day.js`, `Luxon`, `JS-Joda`, or `Temporal`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isDateLike",
      "kind": "FunctionDeclaration",
      "signature": "isDateLike(value)",
      "starter": "import { isDateLike } from \"nhb-toolbox\";\nconsole.log(isDateLike(value));",
      "shortDoc": "* Checks if a value is a date-like object from `Date`, `Chronos`, `Moment.js`, `Day.js`, `Luxon`, `JS-Joda`, or `Temporal`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/guards.d.ts"
    },
    {
      "name": "isDateString",
      "kind": "FunctionDeclaration",
      "signature": "isDateString(value)",
      "starter": "import { isDateString } from \"nhb-toolbox\";\nconsole.log(isDateString(value));",
      "shortDoc": "* Type guard to check if a value is a valid date string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isDateString",
      "kind": "FunctionDeclaration",
      "signature": "isDateString(value)",
      "starter": "import { isDateString } from \"nhb-toolbox\";\nconsole.log(isDateString(value));",
      "shortDoc": "* Type guard to check if a value is a valid date string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isEmail",
      "kind": "FunctionDeclaration",
      "signature": "isEmail(value)",
      "starter": "import { isEmail } from \"nhb-toolbox\";\nconsole.log(isEmail(value));",
      "shortDoc": "* Type guard to check if a value is a valid email string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isEmail",
      "kind": "FunctionDeclaration",
      "signature": "isEmail(value)",
      "starter": "import { isEmail } from \"nhb-toolbox\";\nconsole.log(isEmail(value));",
      "shortDoc": "* Type guard to check if a value is a valid email string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isEmailArray",
      "kind": "FunctionDeclaration",
      "signature": "isEmailArray(value)",
      "starter": "import { isEmailArray } from \"nhb-toolbox\";\nconsole.log(isEmailArray(value));",
      "shortDoc": "* Type guard to check if a value is an array of valid email strings.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isEmailArray",
      "kind": "FunctionDeclaration",
      "signature": "isEmailArray(value)",
      "starter": "import { isEmailArray } from \"nhb-toolbox\";\nconsole.log(isEmailArray(value));",
      "shortDoc": "* Type guard to check if a value is an array of valid email strings.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isEmojiOnly",
      "kind": "FunctionDeclaration",
      "signature": "isEmojiOnly(str)",
      "starter": "import { isEmojiOnly } from \"nhb-toolbox\";\nconsole.log(isEmojiOnly(str));",
      "shortDoc": "* Checks if a string contains only emojis.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isEmojiOnly",
      "kind": "FunctionDeclaration",
      "signature": "isEmojiOnly(str)",
      "starter": "import { isEmojiOnly } from \"nhb-toolbox\";\nconsole.log(isEmojiOnly(str));",
      "shortDoc": "* Checks if a string contains only emojis.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/guards.d.ts"
    },
    {
      "name": "isEmptyObject",
      "kind": "FunctionDeclaration",
      "signature": "isEmptyObject(value)",
      "starter": "import { isEmptyObject } from \"nhb-toolbox\";\nconsole.log(isEmptyObject(value));",
      "shortDoc": "* Type guard to check if a value is an empty object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isEmptyObject",
      "kind": "FunctionDeclaration",
      "signature": "isEmptyObject(value)",
      "starter": "import { isEmptyObject } from \"nhb-toolbox\";\nconsole.log(isEmptyObject(value));",
      "shortDoc": "* Type guard to check if a value is an empty object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isEmptyObjectGuard",
      "kind": "FunctionDeclaration",
      "signature": "isEmptyObjectGuard(value)",
      "starter": "import { isEmptyObjectGuard } from \"nhb-toolbox\";\nconsole.log(isEmptyObjectGuard(value));",
      "shortDoc": "* Type guard to check if a value is an empty object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isEnvironment",
      "kind": "FunctionDeclaration",
      "signature": "isEnvironment(env)",
      "starter": "import { isEnvironment } from \"nhb-toolbox\";\nconsole.log(isEnvironment(env));",
      "shortDoc": "* Type guard to check if the current environment matches a given string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isEnvironment",
      "kind": "FunctionDeclaration",
      "signature": "isEnvironment(env)",
      "starter": "import { isEnvironment } from \"nhb-toolbox\";\nconsole.log(isEnvironment(env));",
      "shortDoc": "* Type guard to check if the current environment matches a given string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isError",
      "kind": "FunctionDeclaration",
      "signature": "isError(value)",
      "starter": "import { isError } from \"nhb-toolbox\";\nconsole.log(isError(value));",
      "shortDoc": "* Type guard to check if a value is an Error object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isError",
      "kind": "FunctionDeclaration",
      "signature": "isError(value)",
      "starter": "import { isError } from \"nhb-toolbox\";\nconsole.log(isError(value));",
      "shortDoc": "* Type guard to check if a value is an Error object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isExpectedNodeENV",
      "kind": "FunctionDeclaration",
      "signature": "isExpectedNodeENV(env)",
      "starter": "import { isExpectedNodeENV } from \"nhb-toolbox\";\nconsole.log(isExpectedNodeENV(env));",
      "shortDoc": "* Type guard to check if the current environment matches a given string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isFalsy",
      "kind": "FunctionDeclaration",
      "signature": "isFalsy(value)",
      "starter": "import { isFalsy } from \"nhb-toolbox\";\nconsole.log(isFalsy(value));",
      "shortDoc": "* Type guard to check if a value is falsy.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isFalsy",
      "kind": "FunctionDeclaration",
      "signature": "isFalsy(value)",
      "starter": "import { isFalsy } from \"nhb-toolbox\";\nconsole.log(isFalsy(value));",
      "shortDoc": "* Type guard to check if a value is falsy.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isFibonacci",
      "kind": "FunctionDeclaration",
      "signature": "isFibonacci(num)",
      "starter": "import { isFibonacci } from \"nhb-toolbox\";\nconsole.log(isFibonacci(num));",
      "shortDoc": "* Checks if a number is part of the Fibonacci sequence.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isFibonacci",
      "kind": "FunctionDeclaration",
      "signature": "isFibonacci(num)",
      "starter": "import { isFibonacci } from \"nhb-toolbox\";\nconsole.log(isFibonacci(num));",
      "shortDoc": "* Checks if a number is part of the Fibonacci sequence.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/guards.d.ts"
    },
    {
      "name": "isFileArray",
      "kind": "FunctionDeclaration",
      "signature": "isFileArray(value)",
      "starter": "import { isFileArray } from \"nhb-toolbox\";\nconsole.log(isFileArray(value));",
      "shortDoc": "* Checks if a given value is an array of `File/Blob` objects.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isFileArray",
      "kind": "FunctionDeclaration",
      "signature": "isFileArray(value)",
      "starter": "import { isFileArray } from \"nhb-toolbox\";\nconsole.log(isFileArray(value));",
      "shortDoc": "* Checks if a given value is an array of `File/Blob` objects.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/guards.d.ts"
    },
    {
      "name": "isFileList",
      "kind": "FunctionDeclaration",
      "signature": "isFileList(value)",
      "starter": "import { isFileList } from \"nhb-toolbox\";\nconsole.log(isFileList(value));",
      "shortDoc": "* Checks if a given value is an instance of `FileList`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isFileList",
      "kind": "FunctionDeclaration",
      "signature": "isFileList(value)",
      "starter": "import { isFileList } from \"nhb-toolbox\";\nconsole.log(isFileList(value));",
      "shortDoc": "* Checks if a given value is an instance of `FileList`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/guards.d.ts"
    },
    {
      "name": "isFileOrBlob",
      "kind": "FunctionDeclaration",
      "signature": "isFileOrBlob(value)",
      "starter": "import { isFileOrBlob } from \"nhb-toolbox\";\nconsole.log(isFileOrBlob(value));",
      "shortDoc": "* Checks if a given value is an instance of `File` or `Blob`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isFileOrBlob",
      "kind": "FunctionDeclaration",
      "signature": "isFileOrBlob(value)",
      "starter": "import { isFileOrBlob } from \"nhb-toolbox\";\nconsole.log(isFileOrBlob(value));",
      "shortDoc": "* Checks if a given value is an instance of `File` or `Blob`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/guards.d.ts"
    },
    {
      "name": "isFileUpload",
      "kind": "FunctionDeclaration",
      "signature": "isFileUpload(value)",
      "starter": "import { isFileUpload } from \"nhb-toolbox\";\nconsole.log(isFileUpload(value));",
      "shortDoc": "* Checks if a given value is a `FileUpload` object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isFileUpload",
      "kind": "FunctionDeclaration",
      "signature": "isFileUpload(value)",
      "starter": "import { isFileUpload } from \"nhb-toolbox\";\nconsole.log(isFileUpload(value));",
      "shortDoc": "* Checks if a given value is a `FileUpload` object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/guards.d.ts"
    },
    {
      "name": "isFunction",
      "kind": "FunctionDeclaration",
      "signature": "isFunction(value)",
      "starter": "import { isFunction } from \"nhb-toolbox\";\nconsole.log(isFunction(value));",
      "shortDoc": "* Type guard to check if a value is a function.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isFunction",
      "kind": "FunctionDeclaration",
      "signature": "isFunction(value)",
      "starter": "import { isFunction } from \"nhb-toolbox\";\nconsole.log(isFunction(value));",
      "shortDoc": "* Type guard to check if a value is a function.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isInteger",
      "kind": "FunctionDeclaration",
      "signature": "isInteger(value)",
      "starter": "import { isInteger } from \"nhb-toolbox\";\nconsole.log(isInteger(value));",
      "shortDoc": "* Type guard to check if a value is an integer.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isInteger",
      "kind": "FunctionDeclaration",
      "signature": "isInteger(value)",
      "starter": "import { isInteger } from \"nhb-toolbox\";\nconsole.log(isInteger(value));",
      "shortDoc": "* Type guard to check if a value is an integer.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isInvalidNumber",
      "kind": "FunctionDeclaration",
      "signature": "isInvalidNumber(numbers)",
      "starter": "import { isInvalidNumber } from \"nhb-toolbox\";\nconsole.log(isInvalidNumber(numbers));",
      "shortDoc": "* Checks whether any input is not a finite number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isIPAddress",
      "kind": "FunctionDeclaration",
      "signature": "isIPAddress(value)",
      "starter": "import { isIPAddress } from \"nhb-toolbox\";\nconsole.log(isIPAddress(value));",
      "shortDoc": "* Type guard to check if a value is a valid IP address (IPv4 or IPv6).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isIPAddress",
      "kind": "FunctionDeclaration",
      "signature": "isIPAddress(value)",
      "starter": "import { isIPAddress } from \"nhb-toolbox\";\nconsole.log(isIPAddress(value));",
      "shortDoc": "* Type guard to check if a value is a valid IP address (IPv4 or IPv6).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isJSON",
      "kind": "FunctionDeclaration",
      "signature": "isJSON(value)",
      "starter": "import { isJSON } from \"nhb-toolbox\";\nconsole.log(isJSON(value));",
      "shortDoc": "* Type guard to check if a string is valid JSON.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isJSON",
      "kind": "FunctionDeclaration",
      "signature": "isJSON(value)",
      "starter": "import { isJSON } from \"nhb-toolbox\";\nconsole.log(isJSON(value));",
      "shortDoc": "* Type guard to check if a string is valid JSON.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isJSONObject",
      "kind": "FunctionDeclaration",
      "signature": "isJSONObject(value)",
      "starter": "import { isJSONObject } from \"nhb-toolbox\";\nconsole.log(isJSONObject(value));",
      "shortDoc": "* Type guard to check if a string is valid JSON.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isKebabCase",
      "kind": "FunctionDeclaration",
      "signature": "isKebabCase(str)",
      "starter": "import { isKebabCase } from \"nhb-toolbox\";\nconsole.log(isKebabCase(str));",
      "shortDoc": "* Checks if a string is in kebab-case format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isKebabCase",
      "kind": "FunctionDeclaration",
      "signature": "isKebabCase(str)",
      "starter": "import { isKebabCase } from \"nhb-toolbox\";\nconsole.log(isKebabCase(str));",
      "shortDoc": "* Checks if a string is in kebab-case format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/guards.d.ts"
    },
    {
      "name": "isLeapYear",
      "kind": "FunctionDeclaration",
      "signature": "isLeapYear(year)",
      "starter": "import { isLeapYear } from \"nhb-toolbox\";\nconsole.log(isLeapYear(year));",
      "shortDoc": "* Checks if the year is a leap year.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isLeapYear",
      "kind": "FunctionDeclaration",
      "signature": "isLeapYear(year)",
      "starter": "import { isLeapYear } from \"nhb-toolbox\";\nconsole.log(isLeapYear(year));",
      "shortDoc": "* Checks if the year is a leap year.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/guards.d.ts"
    },
    {
      "name": "isMap",
      "kind": "FunctionDeclaration",
      "signature": "isMap(value)",
      "starter": "import { isMap } from \"nhb-toolbox\";\nconsole.log(isMap(value));",
      "shortDoc": "* Type guard to check if a value is a Map.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isMap",
      "kind": "FunctionDeclaration",
      "signature": "isMap(value)",
      "starter": "import { isMap } from \"nhb-toolbox\";\nconsole.log(isMap(value));",
      "shortDoc": "* Type guard to check if a value is a Map.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isNode",
      "kind": "FunctionDeclaration",
      "signature": "isNode()",
      "starter": "import { isNode } from \"nhb-toolbox\";\nconsole.log(isNode());",
      "shortDoc": "* Type guard to check if the code is running in a Node.js environment.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isNode",
      "kind": "FunctionDeclaration",
      "signature": "isNode()",
      "starter": "import { isNode } from \"nhb-toolbox\";\nconsole.log(isNode());",
      "shortDoc": "* Type guard to check if the code is running in a Node.js environment.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isNodeENV",
      "kind": "FunctionDeclaration",
      "signature": "isNodeENV(env)",
      "starter": "import { isNodeENV } from \"nhb-toolbox\";\nconsole.log(isNodeENV(env));",
      "shortDoc": "* Type guard to check if the current environment matches a given string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isNodeEnvironment",
      "kind": "FunctionDeclaration",
      "signature": "isNodeEnvironment(env)",
      "starter": "import { isNodeEnvironment } from \"nhb-toolbox\";\nconsole.log(isNodeEnvironment(env));",
      "shortDoc": "* Type guard to check if the current environment matches a given string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isNonEmptyString",
      "kind": "FunctionDeclaration",
      "signature": "isNonEmptyString(value)",
      "starter": "import { isNonEmptyString } from \"nhb-toolbox\";\nconsole.log(isNonEmptyString(value));",
      "shortDoc": "* Type guard to check if a value is a non-empty string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isNonEmptyString",
      "kind": "FunctionDeclaration",
      "signature": "isNonEmptyString(value)",
      "starter": "import { isNonEmptyString } from \"nhb-toolbox\";\nconsole.log(isNonEmptyString(value));",
      "shortDoc": "* Type guard to check if a value is a non-empty string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isNormalPrimitive",
      "kind": "FunctionDeclaration",
      "signature": "isNormalPrimitive(value)",
      "starter": "import { isNormalPrimitive } from \"nhb-toolbox\";\nconsole.log(isNormalPrimitive(value));",
      "shortDoc": "* Type guard to check if a value is a normal primitive (i.e. `string | number | boolean | null | undefined`).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isNormalPrimitive",
      "kind": "FunctionDeclaration",
      "signature": "isNormalPrimitive(value)",
      "starter": "import { isNormalPrimitive } from \"nhb-toolbox\";\nconsole.log(isNormalPrimitive(value));",
      "shortDoc": "* Type guard to check if a value is a normal primitive (i.e. `string | number | boolean | null | undefined`).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isNotEmptyObject",
      "kind": "FunctionDeclaration",
      "signature": "isNotEmptyObject(value)",
      "starter": "import { isNotEmptyObject } from \"nhb-toolbox\";\nconsole.log(isNotEmptyObject(value));",
      "shortDoc": "* Type guard to check if a value is an object (excluding null) and has keys in it.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isNotEmptyObject",
      "kind": "FunctionDeclaration",
      "signature": "isNotEmptyObject(value)",
      "starter": "import { isNotEmptyObject } from \"nhb-toolbox\";\nconsole.log(isNotEmptyObject(value));",
      "shortDoc": "* Type guard to check if a value is an object (excluding null) and has keys in it.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isNull",
      "kind": "FunctionDeclaration",
      "signature": "isNull(value)",
      "starter": "import { isNull } from \"nhb-toolbox\";\nconsole.log(isNull(value));",
      "shortDoc": "* Type guard to check if a value is null.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isNull",
      "kind": "FunctionDeclaration",
      "signature": "isNull(value)",
      "starter": "import { isNull } from \"nhb-toolbox\";\nconsole.log(isNull(value));",
      "shortDoc": "* Type guard to check if a value is null.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isNumber",
      "kind": "FunctionDeclaration",
      "signature": "isNumber(value)",
      "starter": "import { isNumber } from \"nhb-toolbox\";\nconsole.log(isNumber(value));",
      "shortDoc": "* Type guard to check whether a value is a finite number (excluding `NaN` and `Infinity`).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isNumber",
      "kind": "FunctionDeclaration",
      "signature": "isNumber(value)",
      "starter": "import { isNumber } from \"nhb-toolbox\";\nconsole.log(isNumber(value));",
      "shortDoc": "* Type guard to check whether a value is a finite number (excluding `NaN` and `Infinity`).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isNumberInvalid",
      "kind": "FunctionDeclaration",
      "signature": "isNumberInvalid(numbers)",
      "starter": "import { isNumberInvalid } from \"nhb-toolbox\";\nconsole.log(isNumberInvalid(numbers));",
      "shortDoc": "* Checks whether any input is not a finite number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isNumericString",
      "kind": "FunctionDeclaration",
      "signature": "isNumericString(value)",
      "starter": "import { isNumericString } from \"nhb-toolbox\";\nconsole.log(isNumericString(value));",
      "shortDoc": "* Type guard to check if a value is a string representing a finite number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isNumericString",
      "kind": "FunctionDeclaration",
      "signature": "isNumericString(value)",
      "starter": "import { isNumericString } from \"nhb-toolbox\";\nconsole.log(isNumericString(value));",
      "shortDoc": "* Type guard to check if a value is a string representing a finite number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isObject",
      "kind": "FunctionDeclaration",
      "signature": "isObject(value)",
      "starter": "import { isObject } from \"nhb-toolbox\";\nconsole.log(isObject(value));",
      "shortDoc": "* Type guard to check if a value is an object (excluding null).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isObject",
      "kind": "FunctionDeclaration",
      "signature": "isObject(value)",
      "starter": "import { isObject } from \"nhb-toolbox\";\nconsole.log(isObject(value));",
      "shortDoc": "* Type guard to check if a value is an object (excluding null).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isObjectEmpty",
      "kind": "FunctionDeclaration",
      "signature": "isObjectEmpty(value)",
      "starter": "import { isObjectEmpty } from \"nhb-toolbox\";\nconsole.log(isObjectEmpty(value));",
      "shortDoc": "* Type guard to check if a value is an empty object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isObjectWithKeys",
      "kind": "FunctionDeclaration",
      "signature": "isObjectWithKeys(value, keys)",
      "starter": "import { isObjectWithKeys } from \"nhb-toolbox\";\nconsole.log(isObjectWithKeys(value, keys));",
      "shortDoc": "* Type guard to check if a value is an object with specific keys.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isObjectWithKeys",
      "kind": "FunctionDeclaration",
      "signature": "isObjectWithKeys(value, keys)",
      "starter": "import { isObjectWithKeys } from \"nhb-toolbox\";\nconsole.log(isObjectWithKeys(value, keys));",
      "shortDoc": "* Type guard to check if a value is an object with specific keys.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isOriginFileObj",
      "kind": "FunctionDeclaration",
      "signature": "isOriginFileObj(value)",
      "starter": "import { isOriginFileObj } from \"nhb-toolbox\";\nconsole.log(isOriginFileObj(value));",
      "shortDoc": "* Checks if a given value is an `OriginFileObj`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isOriginFileObj",
      "kind": "FunctionDeclaration",
      "signature": "isOriginFileObj(value)",
      "starter": "import { isOriginFileObj } from \"nhb-toolbox\";\nconsole.log(isOriginFileObj(value));",
      "shortDoc": "* Checks if a given value is an `OriginFileObj`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/guards.d.ts"
    },
    {
      "name": "isPartOfFibonacci",
      "kind": "FunctionDeclaration",
      "signature": "isPartOfFibonacci(num)",
      "starter": "import { isPartOfFibonacci } from \"nhb-toolbox\";\nconsole.log(isPartOfFibonacci(num));",
      "shortDoc": "* Checks if a number is part of the Fibonacci sequence.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isPartOfFibonacciSeries",
      "kind": "FunctionDeclaration",
      "signature": "isPartOfFibonacciSeries(num)",
      "starter": "import { isPartOfFibonacciSeries } from \"nhb-toolbox\";\nconsole.log(isPartOfFibonacciSeries(num));",
      "shortDoc": "* Checks if a number is part of the Fibonacci sequence.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isPascalCase",
      "kind": "FunctionDeclaration",
      "signature": "isPascalCase(str)",
      "starter": "import { isPascalCase } from \"nhb-toolbox\";\nconsole.log(isPascalCase(str));",
      "shortDoc": "* Checks if a string is in PascalCase format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isPascalCase",
      "kind": "FunctionDeclaration",
      "signature": "isPascalCase(str)",
      "starter": "import { isPascalCase } from \"nhb-toolbox\";\nconsole.log(isPascalCase(str));",
      "shortDoc": "* Checks if a string is in PascalCase format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/guards.d.ts"
    },
    {
      "name": "isPerfectSquare",
      "kind": "FunctionDeclaration",
      "signature": "isPerfectSquare(num)",
      "starter": "import { isPerfectSquare } from \"nhb-toolbox\";\nconsole.log(isPerfectSquare(num));",
      "shortDoc": "* Checks if a number is a perfect square.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isPerfectSquare",
      "kind": "FunctionDeclaration",
      "signature": "isPerfectSquare(num)",
      "starter": "import { isPerfectSquare } from \"nhb-toolbox\";\nconsole.log(isPerfectSquare(num));",
      "shortDoc": "* Checks if a number is a perfect square.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/guards.d.ts"
    },
    {
      "name": "isPhoneNumber",
      "kind": "FunctionDeclaration",
      "signature": "isPhoneNumber(value)",
      "starter": "import { isPhoneNumber } from \"nhb-toolbox\";\nconsole.log(isPhoneNumber(value));",
      "shortDoc": "* Type guard to check if a value is a valid phone number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isPhoneNumber",
      "kind": "FunctionDeclaration",
      "signature": "isPhoneNumber(value)",
      "starter": "import { isPhoneNumber } from \"nhb-toolbox\";\nconsole.log(isPhoneNumber(value));",
      "shortDoc": "* Type guard to check if a value is a valid phone number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isPositiveInteger",
      "kind": "FunctionDeclaration",
      "signature": "isPositiveInteger(value)",
      "starter": "import { isPositiveInteger } from \"nhb-toolbox\";\nconsole.log(isPositiveInteger(value));",
      "shortDoc": "* Type guard to check if a value is a positive integer.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isPositiveInteger",
      "kind": "FunctionDeclaration",
      "signature": "isPositiveInteger(value)",
      "starter": "import { isPositiveInteger } from \"nhb-toolbox\";\nconsole.log(isPositiveInteger(value));",
      "shortDoc": "* Type guard to check if a value is a positive integer.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isPrimitive",
      "kind": "FunctionDeclaration",
      "signature": "isPrimitive(value)",
      "starter": "import { isPrimitive } from \"nhb-toolbox\";\nconsole.log(isPrimitive(value));",
      "shortDoc": "* Type guard to check if a value is a primitive (i.e. `string | number | boolean | symbol | bigint | null | undefined`).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isPrimitive",
      "kind": "FunctionDeclaration",
      "signature": "isPrimitive(value)",
      "starter": "import { isPrimitive } from \"nhb-toolbox\";\nconsole.log(isPrimitive(value));",
      "shortDoc": "* Type guard to check if a value is a primitive (i.e. `string | number | boolean | symbol | bigint | null | undefined`).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isPromise",
      "kind": "FunctionDeclaration",
      "signature": "isPromise(value)",
      "starter": "import { isPromise } from \"nhb-toolbox\";\nconsole.log(isPromise(value));",
      "shortDoc": "* Type guard to check if a value is a Promise.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isPromise",
      "kind": "FunctionDeclaration",
      "signature": "isPromise(value)",
      "starter": "import { isPromise } from \"nhb-toolbox\";\nconsole.log(isPromise(value));",
      "shortDoc": "* Type guard to check if a value is a Promise.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isRegExp",
      "kind": "FunctionDeclaration",
      "signature": "isRegExp(value)",
      "starter": "import { isRegExp } from \"nhb-toolbox\";\nconsole.log(isRegExp(value));",
      "shortDoc": "* Type guard to check if a value is a RegExp.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isRegExp",
      "kind": "FunctionDeclaration",
      "signature": "isRegExp(value)",
      "starter": "import { isRegExp } from \"nhb-toolbox\";\nconsole.log(isRegExp(value));",
      "shortDoc": "* Type guard to check if a value is a RegExp.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isRegularExpression",
      "kind": "FunctionDeclaration",
      "signature": "isRegularExpression(value)",
      "starter": "import { isRegularExpression } from \"nhb-toolbox\";\nconsole.log(isRegularExpression(value));",
      "shortDoc": "* Type guard to check if a value is a RegExp.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isReturningPromise",
      "kind": "FunctionDeclaration",
      "signature": "isReturningPromise(fn)",
      "starter": "import { isReturningPromise } from \"nhb-toolbox\";\nconsole.log(isReturningPromise(fn));",
      "shortDoc": "* Type guard to check if a function returns a Promise.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isReturningPromise",
      "kind": "FunctionDeclaration",
      "signature": "isReturningPromise(fn)",
      "starter": "import { isReturningPromise } from \"nhb-toolbox\";\nconsole.log(isReturningPromise(fn));",
      "shortDoc": "* Type guard to check if a function returns a Promise.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isSet",
      "kind": "FunctionDeclaration",
      "signature": "isSet(value)",
      "starter": "import { isSet } from \"nhb-toolbox\";\nconsole.log(isSet(value));",
      "shortDoc": "* Type guard to check if a value is a Set.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isSet",
      "kind": "FunctionDeclaration",
      "signature": "isSet(value)",
      "starter": "import { isSet } from \"nhb-toolbox\";\nconsole.log(isSet(value));",
      "shortDoc": "* Type guard to check if a value is a Set.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isSnakeCase",
      "kind": "FunctionDeclaration",
      "signature": "isSnakeCase(str)",
      "starter": "import { isSnakeCase } from \"nhb-toolbox\";\nconsole.log(isSnakeCase(str));",
      "shortDoc": "* Checks if a string is in snake_case format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isSnakeCase",
      "kind": "FunctionDeclaration",
      "signature": "isSnakeCase(str)",
      "starter": "import { isSnakeCase } from \"nhb-toolbox\";\nconsole.log(isSnakeCase(str));",
      "shortDoc": "* Checks if a string is in snake_case format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/guards.d.ts"
    },
    {
      "name": "isString",
      "kind": "FunctionDeclaration",
      "signature": "isString(value)",
      "starter": "import { isString } from \"nhb-toolbox\";\nconsole.log(isString(value));",
      "shortDoc": "* Type guard to check if a value is a string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isString",
      "kind": "FunctionDeclaration",
      "signature": "isString(value)",
      "starter": "import { isString } from \"nhb-toolbox\";\nconsole.log(isString(value));",
      "shortDoc": "* Type guard to check if a value is a string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isSymbol",
      "kind": "FunctionDeclaration",
      "signature": "isSymbol(value)",
      "starter": "import { isSymbol } from \"nhb-toolbox\";\nconsole.log(isSymbol(value));",
      "shortDoc": "* Type guard to check if a value is a symbol.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isSymbol",
      "kind": "FunctionDeclaration",
      "signature": "isSymbol(value)",
      "starter": "import { isSymbol } from \"nhb-toolbox\";\nconsole.log(isSymbol(value));",
      "shortDoc": "* Type guard to check if a value is a symbol.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isTruthy",
      "kind": "FunctionDeclaration",
      "signature": "isTruthy(value)",
      "starter": "import { isTruthy } from \"nhb-toolbox\";\nconsole.log(isTruthy(value));",
      "shortDoc": "* Type guard to check if a value is truthy.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isTruthy",
      "kind": "FunctionDeclaration",
      "signature": "isTruthy(value)",
      "starter": "import { isTruthy } from \"nhb-toolbox\";\nconsole.log(isTruthy(value));",
      "shortDoc": "* Type guard to check if a value is truthy.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isUndefined",
      "kind": "FunctionDeclaration",
      "signature": "isUndefined(value)",
      "starter": "import { isUndefined } from \"nhb-toolbox\";\nconsole.log(isUndefined(value));",
      "shortDoc": "* Type guard to check if a value is undefined.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isUndefined",
      "kind": "FunctionDeclaration",
      "signature": "isUndefined(value)",
      "starter": "import { isUndefined } from \"nhb-toolbox\";\nconsole.log(isUndefined(value));",
      "shortDoc": "* Type guard to check if a value is undefined.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/primitives.d.ts"
    },
    {
      "name": "isURL",
      "kind": "FunctionDeclaration",
      "signature": "isURL(value)",
      "starter": "import { isURL } from \"nhb-toolbox\";\nconsole.log(isURL(value));",
      "shortDoc": "* Type guard to check if a value is a valid URL.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isURL",
      "kind": "FunctionDeclaration",
      "signature": "isURL(value)",
      "starter": "import { isURL } from \"nhb-toolbox\";\nconsole.log(isURL(value));",
      "shortDoc": "* Type guard to check if a value is a valid URL.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isUUID",
      "kind": "FunctionDeclaration",
      "signature": "isUUID(value)",
      "starter": "import { isUUID } from \"nhb-toolbox\";\nconsole.log(isUUID(value));",
      "shortDoc": "* Type guard to check if a value is a valid UUID (v4).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isUUID",
      "kind": "FunctionDeclaration",
      "signature": "isUUID(value)",
      "starter": "import { isUUID } from \"nhb-toolbox\";\nconsole.log(isUUID(value));",
      "shortDoc": "* Type guard to check if a value is a valid UUID (v4).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/specials.d.ts"
    },
    {
      "name": "isValidArray",
      "kind": "FunctionDeclaration",
      "signature": "isValidArray(value)",
      "starter": "import { isValidArray } from \"nhb-toolbox\";\nconsole.log(isValidArray(value));",
      "shortDoc": "* Type guard to check if a value is an array with length.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidArray",
      "kind": "FunctionDeclaration",
      "signature": "isValidArray(value)",
      "starter": "import { isValidArray } from \"nhb-toolbox\";\nconsole.log(isValidArray(value));",
      "shortDoc": "* Type guard to check if a value is an array with length.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isValidEmail",
      "kind": "FunctionDeclaration",
      "signature": "isValidEmail(value)",
      "starter": "import { isValidEmail } from \"nhb-toolbox\";\nconsole.log(isValidEmail(value));",
      "shortDoc": "* Type guard to check if a value is a valid email string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidFormData",
      "kind": "FunctionDeclaration",
      "signature": "isValidFormData(value)",
      "starter": "import { isValidFormData } from \"nhb-toolbox\";\nconsole.log(isValidFormData(value));",
      "shortDoc": "* Checks if a given value is a valid `FormData` & it's not empty.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidFormData",
      "kind": "FunctionDeclaration",
      "signature": "isValidFormData(value)",
      "starter": "import { isValidFormData } from \"nhb-toolbox\";\nconsole.log(isValidFormData(value));",
      "shortDoc": "* Checks if a given value is a valid `FormData` & it's not empty.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/guards.d.ts"
    },
    {
      "name": "isValidJSON",
      "kind": "FunctionDeclaration",
      "signature": "isValidJSON(value)",
      "starter": "import { isValidJSON } from \"nhb-toolbox\";\nconsole.log(isValidJSON(value));",
      "shortDoc": "* Type guard to check if a string is valid JSON.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidMap",
      "kind": "FunctionDeclaration",
      "signature": "isValidMap(value)",
      "starter": "import { isValidMap } from \"nhb-toolbox\";\nconsole.log(isValidMap(value));",
      "shortDoc": "* Type guard to check if a value is a Map.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidObject",
      "kind": "FunctionDeclaration",
      "signature": "isValidObject(value)",
      "starter": "import { isValidObject } from \"nhb-toolbox\";\nconsole.log(isValidObject(value));",
      "shortDoc": "* Type guard to check if a value is an object (excluding null) and has keys in it.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidSet",
      "kind": "FunctionDeclaration",
      "signature": "isValidSet(value)",
      "starter": "import { isValidSet } from \"nhb-toolbox\";\nconsole.log(isValidSet(value));",
      "shortDoc": "* Type guard to check if a value is a Set.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidTime",
      "kind": "FunctionDeclaration",
      "signature": "isValidTime(value)",
      "starter": "import { isValidTime } from \"nhb-toolbox\";\nconsole.log(isValidTime(value));",
      "shortDoc": "* Checks if the provided value is a valid time string in \"HH:MM\" format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidTime",
      "kind": "FunctionDeclaration",
      "signature": "isValidTime(value)",
      "starter": "import { isValidTime } from \"nhb-toolbox\";\nconsole.log(isValidTime(value));",
      "shortDoc": "* Checks if the provided value is a valid time string in \"HH:MM\" format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/guards.d.ts"
    },
    {
      "name": "isValidTimeString",
      "kind": "FunctionDeclaration",
      "signature": "isValidTimeString(value)",
      "starter": "import { isValidTimeString } from \"nhb-toolbox\";\nconsole.log(isValidTimeString(value));",
      "shortDoc": "* Checks if the provided value is a valid time string in \"HH:MM\" format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidURL",
      "kind": "FunctionDeclaration",
      "signature": "isValidURL(value)",
      "starter": "import { isValidURL } from \"nhb-toolbox\";\nconsole.log(isValidURL(value));",
      "shortDoc": "* Type guard to check if a value is a valid URL.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidUTC",
      "kind": "FunctionDeclaration",
      "signature": "isValidUTC(value)",
      "starter": "import { isValidUTC } from \"nhb-toolbox\";\nconsole.log(isValidUTC(value));",
      "shortDoc": "* Checks if the provided value is a valid UTCOffSet (e.g. `UTC-01:30`).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidUTCOffSet",
      "kind": "FunctionDeclaration",
      "signature": "isValidUTCOffSet(value)",
      "starter": "import { isValidUTCOffSet } from \"nhb-toolbox\";\nconsole.log(isValidUTCOffSet(value));",
      "shortDoc": "* Checks if the provided value is a valid UTCOffSet (e.g. `UTC-01:30`).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidUTCOffSet",
      "kind": "FunctionDeclaration",
      "signature": "isValidUTCOffSet(value)",
      "starter": "import { isValidUTCOffSet } from \"nhb-toolbox\";\nconsole.log(isValidUTCOffSet(value));",
      "shortDoc": "* Checks if the provided value is a valid UTCOffSet (e.g. `UTC-01:30`).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/guards.d.ts"
    },
    {
      "name": "joinArrayElements",
      "kind": "FunctionDeclaration",
      "signature": "joinArrayElements(array, options)",
      "starter": "import { joinArrayElements } from \"nhb-toolbox\";\nconsole.log(joinArrayElements(array, options));",
      "shortDoc": "* Converts an array of objects to a string using a specific property (supports nested path to primitive values) and separator.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "minutesToUTCOffset",
      "kind": "FunctionDeclaration",
      "signature": "minutesToUTCOffset(minutes)",
      "starter": "import { minutesToUTCOffset } from \"nhb-toolbox\";\nconsole.log(minutesToUTCOffset(minutes));",
      "shortDoc": "* Converts a minute-based offset to a UTC offset string in the format `UTC±HH:MM`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "moveArrayElement",
      "kind": "FunctionDeclaration",
      "signature": "moveArrayElement(arr, fromIndex, toIndex)",
      "starter": "import { moveArrayElement } from \"nhb-toolbox\";\nconsole.log(moveArrayElement(arr, fromIndex, toIndex));",
      "shortDoc": "* Moves an element within an array from one index to another.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "moveArrayElement",
      "kind": "FunctionDeclaration",
      "signature": "moveArrayElement(arr, fromIndex, toIndex)",
      "starter": "import { moveArrayElement } from \"nhb-toolbox\";\nconsole.log(moveArrayElement(arr, fromIndex, toIndex));",
      "shortDoc": "* Moves an element within an array from one index to another.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/transform.d.ts"
    },
    {
      "name": "naturalSort",
      "kind": "FunctionDeclaration",
      "signature": "naturalSort(a, b, options)",
      "starter": "import { naturalSort } from \"nhb-toolbox\";\nconsole.log(naturalSort(a, b, options));",
      "shortDoc": "* Compare two strings using natural sorting (e.g., \"file2\" < \"file10\").",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "naturalSort",
      "kind": "FunctionDeclaration",
      "signature": "naturalSort(a, b, options)",
      "starter": "import { naturalSort } from \"nhb-toolbox\";\nconsole.log(naturalSort(a, b, options));",
      "shortDoc": "* Compare two strings using natural sorting (e.g., \"file2\" < \"file10\").",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/utils.d.ts"
    },
    {
      "name": "naturalSortForString",
      "kind": "FunctionDeclaration",
      "signature": "naturalSortForString(a, b, options)",
      "starter": "import { naturalSortForString } from \"nhb-toolbox\";\nconsole.log(naturalSortForString(a, b, options));",
      "shortDoc": "* Compare two strings using natural sorting (e.g., \"file2\" < \"file10\").",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "normalizeString",
      "kind": "FunctionDeclaration",
      "signature": "normalizeString(str)",
      "starter": "import { normalizeString } from \"nhb-toolbox\";\nconsole.log(normalizeString(str));",
      "shortDoc": "* Normalizes a string by removing diacritics (accents).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "normalizeString",
      "kind": "FunctionDeclaration",
      "signature": "normalizeString(str)",
      "starter": "import { normalizeString } from \"nhb-toolbox\";\nconsole.log(normalizeString(str));",
      "shortDoc": "* Normalizes a string by removing diacritics (accents).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/convert.d.ts"
    },
    {
      "name": "numberToWords",
      "kind": "FunctionDeclaration",
      "signature": "numberToWords(num)",
      "starter": "import { numberToWords } from \"nhb-toolbox\";\nconsole.log(numberToWords(num));",
      "shortDoc": "* Converts a numeric value into its corresponding English word representation.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "numberToWords",
      "kind": "FunctionDeclaration",
      "signature": "numberToWords(num)",
      "starter": "import { numberToWords } from \"nhb-toolbox\";\nconsole.log(numberToWords(num));",
      "shortDoc": "* Converts a numeric value into its corresponding English word representation.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/convert.d.ts"
    },
    {
      "name": "numberToWordsOrdinal",
      "kind": "FunctionDeclaration",
      "signature": "numberToWordsOrdinal(number)",
      "starter": "import { numberToWordsOrdinal } from \"nhb-toolbox\";\nconsole.log(numberToWordsOrdinal(number));",
      "shortDoc": "* Converts a number, numeric string, or cardinal word string into its ordinal word representation.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "numberToWordsOrdinal",
      "kind": "FunctionDeclaration",
      "signature": "numberToWordsOrdinal(number)",
      "starter": "import { numberToWordsOrdinal } from \"nhb-toolbox\";\nconsole.log(numberToWordsOrdinal(number));",
      "shortDoc": "* Converts a number, numeric string, or cardinal word string into its ordinal word representation.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/convert.d.ts"
    },
    {
      "name": "omitFields",
      "kind": "FunctionDeclaration",
      "signature": "omitFields(source, keys)",
      "starter": "import { omitFields } from \"nhb-toolbox\";\nconsole.log(omitFields(source, keys));",
      "shortDoc": "* Create a new object by removing specific keys from the source object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "omitObjectFields",
      "kind": "FunctionDeclaration",
      "signature": "omitObjectFields(source, keys)",
      "starter": "import { omitObjectFields } from \"nhb-toolbox\";\nconsole.log(omitObjectFields(source, keys));",
      "shortDoc": "* Create a new object by removing specific keys from the source object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "parseFormData",
      "kind": "FunctionDeclaration",
      "signature": "parseFormData(data, parsePrimitives)",
      "starter": "import { parseFormData } from \"nhb-toolbox\";\nconsole.log(parseFormData(data, parsePrimitives));",
      "shortDoc": "* Parse form data from a `FormData` object or query string into a structured object format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "parseFormData",
      "kind": "FunctionDeclaration",
      "signature": "parseFormData(data, parsePrimitives)",
      "starter": "import { parseFormData } from \"nhb-toolbox\";\nconsole.log(parseFormData(data, parsePrimitives));",
      "shortDoc": "* Parse form data from a `FormData` object or query string into a structured object format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/transform.d.ts"
    },
    {
      "name": "parseObjectValues",
      "kind": "FunctionDeclaration",
      "signature": "parseObjectValues(object, parseNested)",
      "starter": "import { parseObjectValues } from \"nhb-toolbox\";\nconsole.log(parseObjectValues(object, parseNested));",
      "shortDoc": "* Parse an object of stringified values into their appropriate primitive types.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "parseObjectValues",
      "kind": "FunctionDeclaration",
      "signature": "parseObjectValues(object, parseNested)",
      "starter": "import { parseObjectValues } from \"nhb-toolbox\";\nconsole.log(parseObjectValues(object, parseNested));",
      "shortDoc": "* Parse an object of stringified values into their appropriate primitive types.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/sanitize.d.ts"
    },
    {
      "name": "parsePrimitivesDeep",
      "kind": "FunctionDeclaration",
      "signature": "parsePrimitivesDeep(input)",
      "starter": "import { parsePrimitivesDeep } from \"nhb-toolbox\";\nconsole.log(parsePrimitivesDeep(input));",
      "shortDoc": "* Recursively parses primitive values inside objects and arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "parseStringifiedObjectValues",
      "kind": "FunctionDeclaration",
      "signature": "parseStringifiedObjectValues(object, parseNested)",
      "starter": "import { parseStringifiedObjectValues } from \"nhb-toolbox\";\nconsole.log(parseStringifiedObjectValues(object, parseNested));",
      "shortDoc": "* Parse an object of stringified values into their appropriate primitive types.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "pickFields",
      "kind": "FunctionDeclaration",
      "signature": "pickFields(source, keys)",
      "starter": "import { pickFields } from \"nhb-toolbox\";\nconsole.log(pickFields(source, keys));",
      "shortDoc": "* Pick specific fields from an object and create a new object with specified fields.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "pickFields",
      "kind": "FunctionDeclaration",
      "signature": "pickFields(source, keys)",
      "starter": "import { pickFields } from \"nhb-toolbox\";\nconsole.log(pickFields(source, keys));",
      "shortDoc": "* Pick specific fields from an object and create a new object with specified fields.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/convert.d.ts"
    },
    {
      "name": "pickFieldsByCondition",
      "kind": "FunctionDeclaration",
      "signature": "pickFieldsByCondition(source, condition)",
      "starter": "import { pickFieldsByCondition } from \"nhb-toolbox\";\nconsole.log(pickFieldsByCondition(source, condition));",
      "shortDoc": "* Pick specific fields from an object based on a given condition.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "pickObjectFields",
      "kind": "FunctionDeclaration",
      "signature": "pickObjectFields(source, keys)",
      "starter": "import { pickObjectFields } from \"nhb-toolbox\";\nconsole.log(pickObjectFields(source, keys));",
      "shortDoc": "* Pick specific fields from an object and create a new object with specified fields.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "pickObjectFieldsByCondition",
      "kind": "FunctionDeclaration",
      "signature": "pickObjectFieldsByCondition(source, condition)",
      "starter": "import { pickObjectFieldsByCondition } from \"nhb-toolbox\";\nconsole.log(pickObjectFieldsByCondition(source, condition));",
      "shortDoc": "* Pick specific fields from an object based on a given condition.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "pickObjectFieldsByCondition",
      "kind": "FunctionDeclaration",
      "signature": "pickObjectFieldsByCondition(source, condition)",
      "starter": "import { pickObjectFieldsByCondition } from \"nhb-toolbox\";\nconsole.log(pickObjectFieldsByCondition(source, condition));",
      "shortDoc": "* Pick specific fields from an object based on a given condition.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/convert.d.ts"
    },
    {
      "name": "remapFields",
      "kind": "FunctionDeclaration",
      "signature": "remapFields(source, fieldMap)",
      "starter": "import { remapFields } from \"nhb-toolbox\";\nconsole.log(remapFields(source, fieldMap));",
      "shortDoc": "* Remap fields from one object to another.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "remapFields",
      "kind": "FunctionDeclaration",
      "signature": "remapFields(source, fieldMap)",
      "starter": "import { remapFields } from \"nhb-toolbox\";\nconsole.log(remapFields(source, fieldMap));",
      "shortDoc": "* Remap fields from one object to another.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/convert.d.ts"
    },
    {
      "name": "remapObjectFields",
      "kind": "FunctionDeclaration",
      "signature": "remapObjectFields(source, fieldMap)",
      "starter": "import { remapObjectFields } from \"nhb-toolbox\";\nconsole.log(remapObjectFields(source, fieldMap));",
      "shortDoc": "* Remap fields from one object to another.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "removeDuplicates",
      "kind": "FunctionDeclaration",
      "signature": "removeDuplicates(array)",
      "starter": "import { removeDuplicates } from \"nhb-toolbox\";\nconsole.log(removeDuplicates(array));",
      "shortDoc": "* Removes duplicate values from an array, supporting deep comparison for objects and arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "removeDuplicatesFromArray",
      "kind": "FunctionDeclaration",
      "signature": "removeDuplicatesFromArray(array)",
      "starter": "import { removeDuplicatesFromArray } from \"nhb-toolbox\";\nconsole.log(removeDuplicatesFromArray(array));",
      "shortDoc": "* Removes duplicate values from an array, supporting deep comparison for objects and arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "removeDuplicatesFromArray",
      "kind": "FunctionDeclaration",
      "signature": "removeDuplicatesFromArray(array)",
      "starter": "import { removeDuplicatesFromArray } from \"nhb-toolbox\";\nconsole.log(removeDuplicatesFromArray(array));",
      "shortDoc": "* Removes duplicate values from an array, supporting deep comparison for objects and arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/transform.d.ts"
    },
    {
      "name": "removeFields",
      "kind": "FunctionDeclaration",
      "signature": "removeFields(source, keys)",
      "starter": "import { removeFields } from \"nhb-toolbox\";\nconsole.log(removeFields(source, keys));",
      "shortDoc": "* Create a new object by removing specific keys from the source object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "removeObjectFields",
      "kind": "FunctionDeclaration",
      "signature": "removeObjectFields(source, keys)",
      "starter": "import { removeObjectFields } from \"nhb-toolbox\";\nconsole.log(removeObjectFields(source, keys));",
      "shortDoc": "* Create a new object by removing specific keys from the source object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "reverseNumber",
      "kind": "FunctionDeclaration",
      "signature": "reverseNumber(num)",
      "starter": "import { reverseNumber } from \"nhb-toolbox\";\nconsole.log(reverseNumber(num));",
      "shortDoc": "* Reverses a number (e.g., `123` → `321`).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "reverseNumber",
      "kind": "FunctionDeclaration",
      "signature": "reverseNumber(num)",
      "starter": "import { reverseNumber } from \"nhb-toolbox\";\nconsole.log(reverseNumber(num));",
      "shortDoc": "* Reverses a number (e.g., `123` → `321`).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/basics.d.ts"
    },
    {
      "name": "rotateArray",
      "kind": "FunctionDeclaration",
      "signature": "rotateArray(arr, steps)",
      "starter": "import { rotateArray } from \"nhb-toolbox\";\nconsole.log(rotateArray(arr, steps));",
      "shortDoc": "* Rotates an array left or right by a given number of steps.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "rotateArray",
      "kind": "FunctionDeclaration",
      "signature": "rotateArray(arr, steps)",
      "starter": "import { rotateArray } from \"nhb-toolbox\";\nconsole.log(rotateArray(arr, steps));",
      "shortDoc": "* Rotates an array left or right by a given number of steps.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/transform.d.ts"
    },
    {
      "name": "roundNumber",
      "kind": "FunctionDeclaration",
      "signature": "roundNumber(number, roundTo)",
      "starter": "import { roundNumber } from \"nhb-toolbox\";\nconsole.log(roundNumber(number, roundTo));",
      "shortDoc": "* Rounds a number to a specified number of decimal places.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "roundNumber",
      "kind": "FunctionDeclaration",
      "signature": "roundNumber(number, roundTo)",
      "starter": "import { roundNumber } from \"nhb-toolbox\";\nconsole.log(roundNumber(number, roundTo));",
      "shortDoc": "* Rounds a number to a specified number of decimal places.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/basics.d.ts"
    },
    {
      "name": "roundToDecimal",
      "kind": "FunctionDeclaration",
      "signature": "roundToDecimal(number, roundTo)",
      "starter": "import { roundToDecimal } from \"nhb-toolbox\";\nconsole.log(roundToDecimal(number, roundTo));",
      "shortDoc": "* Rounds a number to a specified number of decimal places.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "sanitizeData",
      "kind": "FunctionDeclaration",
      "signature": "sanitizeData(input)",
      "starter": "import { sanitizeData } from \"nhb-toolbox\";\nconsole.log(sanitizeData(input));",
      "shortDoc": "* Trims all the words in a string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "sanitizeData",
      "kind": "FunctionDeclaration",
      "signature": "sanitizeData(input)",
      "starter": "import { sanitizeData } from \"nhb-toolbox\";\nconsole.log(sanitizeData(input));",
      "shortDoc": "* Trims all the words in a string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/sanitize.d.ts"
    },
    {
      "name": "serializeForm",
      "kind": "FunctionDeclaration",
      "signature": "serializeForm(form, toQueryString)",
      "starter": "import { serializeForm } from \"nhb-toolbox\";\nconsole.log(serializeForm(form, toQueryString));",
      "shortDoc": "* Serialize form data into an object or a query string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "serializeForm",
      "kind": "FunctionDeclaration",
      "signature": "serializeForm(form, toQueryString)",
      "starter": "import { serializeForm } from \"nhb-toolbox\";\nconsole.log(serializeForm(form, toQueryString));",
      "shortDoc": "* Serialize form data into an object or a query string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/transform.d.ts"
    },
    {
      "name": "smoothScrollTo",
      "kind": "FunctionDeclaration",
      "signature": "smoothScrollTo(element, offset)",
      "starter": "import { smoothScrollTo } from \"nhb-toolbox\";\nconsole.log(smoothScrollTo(element, offset));",
      "shortDoc": "* Scrolls smoothly to the given element with an optional vertical offset.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "smoothScrollTo",
      "kind": "FunctionDeclaration",
      "signature": "smoothScrollTo(element, offset)",
      "starter": "import { smoothScrollTo } from \"nhb-toolbox\";\nconsole.log(smoothScrollTo(element, offset));",
      "shortDoc": "* Scrolls smoothly to the given element with an optional vertical offset.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/utils.d.ts"
    },
    {
      "name": "sortAnArray",
      "kind": "FunctionDeclaration",
      "signature": "sortAnArray(array, options)",
      "starter": "import { sortAnArray } from \"nhb-toolbox\";\nconsole.log(sortAnArray(array, options));",
      "shortDoc": "* Sorts an array of objects.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "sortAnArray",
      "kind": "FunctionDeclaration",
      "signature": "sortAnArray(array, options)",
      "starter": "import { sortAnArray } from \"nhb-toolbox\";\nconsole.log(sortAnArray(array, options));",
      "shortDoc": "* Sorts an array of objects.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/sort.d.ts"
    },
    {
      "name": "splitArray",
      "kind": "FunctionDeclaration",
      "signature": "splitArray(arr, chunkSize)",
      "starter": "import { splitArray } from \"nhb-toolbox\";\nconsole.log(splitArray(arr, chunkSize));",
      "shortDoc": "* Splits an array into chunks of a given size.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "splitArray",
      "kind": "FunctionDeclaration",
      "signature": "splitArray(arr, chunkSize)",
      "starter": "import { splitArray } from \"nhb-toolbox\";\nconsole.log(splitArray(arr, chunkSize));",
      "shortDoc": "* Splits an array into chunks of a given size.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/transform.d.ts"
    },
    {
      "name": "splitArrayByProperty",
      "kind": "FunctionDeclaration",
      "signature": "splitArrayByProperty(source, property)",
      "starter": "import { splitArrayByProperty } from \"nhb-toolbox\";\nconsole.log(splitArrayByProperty(source, property));",
      "shortDoc": "* Group an array of objects by a specified key, returning only arrays of grouped objects.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "splitArrayByProperty",
      "kind": "FunctionDeclaration",
      "signature": "splitArrayByProperty(source, property)",
      "starter": "import { splitArrayByProperty } from \"nhb-toolbox\";\nconsole.log(splitArrayByProperty(source, property));",
      "shortDoc": "* Group an array of objects by a specified key, returning only arrays of grouped objects.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/transform.d.ts"
    },
    {
      "name": "sumByField",
      "kind": "FunctionDeclaration",
      "signature": "sumByField(data, field, roundTo)",
      "starter": "import { sumByField } from \"nhb-toolbox\";\nconsole.log(sumByField(data, field, roundTo));",
      "shortDoc": "* Calculates the total sum of a numeric field across all items.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "sumByField",
      "kind": "FunctionDeclaration",
      "signature": "sumByField(data, field, roundTo)",
      "starter": "import { sumByField } from \"nhb-toolbox\";\nconsole.log(sumByField(data, field, roundTo));",
      "shortDoc": "* Calculates the total sum of a numeric field across all items.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/calc.d.ts"
    },
    {
      "name": "sumDigits",
      "kind": "FunctionDeclaration",
      "signature": "sumDigits(num)",
      "starter": "import { sumDigits } from \"nhb-toolbox\";\nconsole.log(sumDigits(num));",
      "shortDoc": "* Sums up all digits of a number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "sumDigits",
      "kind": "FunctionDeclaration",
      "signature": "sumDigits(num)",
      "starter": "import { sumDigits } from \"nhb-toolbox\";\nconsole.log(sumDigits(num));",
      "shortDoc": "* Sums up all digits of a number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/basics.d.ts"
    },
    {
      "name": "sumFieldDifference",
      "kind": "FunctionDeclaration",
      "signature": "sumFieldDifference(data, first, second, roundTo)",
      "starter": "import { sumFieldDifference } from \"nhb-toolbox\";\nconsole.log(sumFieldDifference(data, first, second, roundTo));",
      "shortDoc": "* Calculates the sum of differences between two numeric fields for each item in the array.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "sumFieldDifference",
      "kind": "FunctionDeclaration",
      "signature": "sumFieldDifference(data, first, second, roundTo)",
      "starter": "import { sumFieldDifference } from \"nhb-toolbox\";\nconsole.log(sumFieldDifference(data, first, second, roundTo));",
      "shortDoc": "* Calculates the sum of differences between two numeric fields for each item in the array.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/calc.d.ts"
    },
    {
      "name": "sumNumbers",
      "kind": "FunctionDeclaration",
      "signature": "sumNumbers(numbers)",
      "starter": "import { sumNumbers } from \"nhb-toolbox\";\nconsole.log(sumNumbers(numbers));",
      "shortDoc": "* Sums up numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "sumNumbers",
      "kind": "FunctionDeclaration",
      "signature": "sumNumbers(numbers)",
      "starter": "import { sumNumbers } from \"nhb-toolbox\";\nconsole.log(sumNumbers(numbers));",
      "shortDoc": "* Sums up numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/basics.d.ts"
    },
    {
      "name": "sumOfNumbers",
      "kind": "FunctionDeclaration",
      "signature": "sumOfNumbers(numbers)",
      "starter": "import { sumOfNumbers } from \"nhb-toolbox\";\nconsole.log(sumOfNumbers(numbers));",
      "shortDoc": "* Sums up numbers.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "throttleAction",
      "kind": "FunctionDeclaration",
      "signature": "throttleAction(callback, delay)",
      "starter": "import { throttleAction } from \"nhb-toolbox\";\nconsole.log(throttleAction(callback, delay));",
      "shortDoc": "* A generic throttle function that ensures a callback is executed at most once per specified interval.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "throttleAction",
      "kind": "FunctionDeclaration",
      "signature": "throttleAction(callback, delay)",
      "starter": "import { throttleAction } from \"nhb-toolbox\";\nconsole.log(throttleAction(callback, delay));",
      "shortDoc": "* A generic throttle function that ensures a callback is executed at most once per specified interval.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "toggleFullScreen",
      "kind": "FunctionDeclaration",
      "signature": "toggleFullScreen(element)",
      "starter": "import { toggleFullScreen } from \"nhb-toolbox\";\nconsole.log(toggleFullScreen(element));",
      "shortDoc": "* Toggles full-screen mode for a given element (or the `document` by default).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "toggleFullScreen",
      "kind": "FunctionDeclaration",
      "signature": "toggleFullScreen(element)",
      "starter": "import { toggleFullScreen } from \"nhb-toolbox\";\nconsole.log(toggleFullScreen(element));",
      "shortDoc": "* Toggles full-screen mode for a given element (or the `document` by default).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/utils.d.ts"
    },
    {
      "name": "totalDeltaByField",
      "kind": "FunctionDeclaration",
      "signature": "totalDeltaByField(data, first, second, roundTo)",
      "starter": "import { totalDeltaByField } from \"nhb-toolbox\";\nconsole.log(totalDeltaByField(data, first, second, roundTo));",
      "shortDoc": "* Calculates the sum of differences between two numeric fields for each item in the array.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "trimString",
      "kind": "FunctionDeclaration",
      "signature": "trimString(input)",
      "starter": "import { trimString } from \"nhb-toolbox\";\nconsole.log(trimString(input));",
      "shortDoc": "* Trims all the words in a string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "trimString",
      "kind": "FunctionDeclaration",
      "signature": "trimString(input)",
      "starter": "import { trimString } from \"nhb-toolbox\";\nconsole.log(trimString(input));",
      "shortDoc": "* Trims all the words in a string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/basics.d.ts"
    },
    {
      "name": "updateQueryParam",
      "kind": "FunctionDeclaration",
      "signature": "updateQueryParam(key, value)",
      "starter": "import { updateQueryParam } from \"nhb-toolbox\";\nconsole.log(updateQueryParam(key, value));",
      "shortDoc": "* Update query params in the browser URL with given key and value.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "updateQueryParam",
      "kind": "FunctionDeclaration",
      "signature": "updateQueryParam(key, value)",
      "starter": "import { updateQueryParam } from \"nhb-toolbox\";\nconsole.log(updateQueryParam(key, value));",
      "shortDoc": "* Update query params in the browser URL with given key and value.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/query.d.ts"
    },
    {
      "name": "wordCount",
      "kind": "FunctionDeclaration",
      "signature": "wordCount(text)",
      "starter": "import { wordCount } from \"nhb-toolbox\";\nconsole.log(wordCount(text));",
      "shortDoc": "* Counts the number of words in a string, supporting multiple languages and scripts.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "Chronos",
      "kind": "ClassDeclaration",
      "signature": "class Chronos()",
      "starter": "import { Chronos } from \"nhb-toolbox\";\nconst inst = new Chronos();\nconsole.log(inst);",
      "shortDoc": "* Creates a new immutable `Chronos` instance.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "Chronos",
      "kind": "ClassDeclaration",
      "signature": "class Chronos()",
      "starter": "import { Chronos } from \"nhb-toolbox\";\nconst inst = new Chronos();\nconsole.log(inst);",
      "shortDoc": "* Creates a new immutable `Chronos` instance.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/Chronos.d.ts"
    },
    {
      "name": "Chronus",
      "kind": "ClassDeclaration",
      "signature": "class Chronus()",
      "starter": "import { Chronus } from \"nhb-toolbox\";\nconst inst = new Chronus();\nconsole.log(inst);",
      "shortDoc": "* Creates a new immutable `Chronos` instance.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "Color",
      "kind": "ClassDeclaration",
      "signature": "class Color()",
      "starter": "import { Color } from \"nhb-toolbox\";\nconst inst = new Color();\nconsole.log(inst);",
      "shortDoc": "* Class representing a color and its conversions among `Hex`, `Hex8` `RGB`, `RGBA`, `HSL` and `HSLA` formats.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "Color",
      "kind": "ClassDeclaration",
      "signature": "class Color()",
      "starter": "import { Color } from \"nhb-toolbox\";\nconst inst = new Color();\nconsole.log(inst);",
      "shortDoc": "* Class representing a color and its conversions among `Hex`, `Hex8` `RGB`, `RGBA`, `HSL` and `HSLA` formats.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/Color.d.ts"
    },
    {
      "name": "Colour",
      "kind": "ClassDeclaration",
      "signature": "class Colour()",
      "starter": "import { Colour } from \"nhb-toolbox\";\nconst inst = new Colour();\nconsole.log(inst);",
      "shortDoc": "* Class representing a color and its conversions among `Hex`, `Hex8` `RGB`, `RGBA`, `HSL` and `HSLA` formats.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "Currency",
      "kind": "ClassDeclaration",
      "signature": "class Currency(amount, code)",
      "starter": "import { Currency } from \"nhb-toolbox\";\nconst inst = new Currency(amount, code);\nconsole.log(inst);",
      "shortDoc": "* A utility class for handling currency operations like formatting and conversion.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "Currency",
      "kind": "ClassDeclaration",
      "signature": "class Currency(amount, code)",
      "starter": "import { Currency } from \"nhb-toolbox\";\nconst inst = new Currency(amount, code);\nconsole.log(inst);",
      "shortDoc": "* A utility class for handling currency operations like formatting and conversion.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/Currency.d.ts"
    },
    {
      "name": "Finder",
      "kind": "ClassDeclaration",
      "signature": "class Finder(data, ttl)",
      "starter": "import { Finder } from \"nhb-toolbox\";\nconst inst = new Finder(data, ttl);\nconsole.log(inst);",
      "shortDoc": "The `Finder` class performs optimized searching on arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "Finder",
      "kind": "ClassDeclaration",
      "signature": "class Finder(data, ttl)",
      "starter": "import { Finder } from \"nhb-toolbox\";\nconst inst = new Finder(data, ttl);\nconsole.log(inst);",
      "shortDoc": "The `Finder` class performs optimized searching on arrays.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/Finder.d.ts"
    },
    {
      "name": "HttpStatus",
      "kind": "ClassDeclaration",
      "signature": "class HttpStatus()",
      "starter": "import { HttpStatus } from \"nhb-toolbox\";\nconst inst = new HttpStatus();\nconsole.log(inst);",
      "shortDoc": "* Utility class for retrieving and managing HTTP status codes with rich MDN-based metadata.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "HttpStatus",
      "kind": "ClassDeclaration",
      "signature": "class HttpStatus()",
      "starter": "import { HttpStatus } from \"nhb-toolbox\";\nconst inst = new HttpStatus();\nconsole.log(inst);",
      "shortDoc": "* Utility class for retrieving and managing HTTP status codes with rich MDN-based metadata.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/http-status/HttpStatus.d.ts"
    },
    {
      "name": "Paginator",
      "kind": "ClassDeclaration",
      "signature": "class Paginator(options)",
      "starter": "import { Paginator } from \"nhb-toolbox\";\nconst inst = new Paginator(options);\nconsole.log(inst);",
      "shortDoc": "Generates pagination logic, offsets, metadata and other pagination logic(s) for APIs and UIs.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "Paginator",
      "kind": "ClassDeclaration",
      "signature": "class Paginator(options)",
      "starter": "import { Paginator } from \"nhb-toolbox\";\nconst inst = new Paginator(options);\nconsole.log(inst);",
      "shortDoc": "Generates pagination logic, offsets, metadata and other pagination logic(s) for APIs and UIs.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/Paginator.d.ts"
    },
    {
      "name": "Pluralizer",
      "kind": "ClassDeclaration",
      "signature": "class Pluralizer()",
      "starter": "import { Pluralizer } from \"nhb-toolbox\";\nconst inst = new Pluralizer();\nconsole.log(inst);",
      "shortDoc": "* Handles English word pluralization and singularization with support for irregular forms and uncountable nouns.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "Pluralizer",
      "kind": "ClassDeclaration",
      "signature": "class Pluralizer()",
      "starter": "import { Pluralizer } from \"nhb-toolbox\";\nconst inst = new Pluralizer();\nconsole.log(inst);",
      "shortDoc": "* Handles English word pluralization and singularization with support for irregular forms and uncountable nouns.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/pluralize/Pluralizer.d.ts"
    },
    {
      "name": "Unit",
      "kind": "ClassDeclaration",
      "signature": "class Unit(value, unit)",
      "starter": "import { Unit } from \"nhb-toolbox\";\nconst inst = new Unit(value, unit);\nconsole.log(inst);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "Unit",
      "kind": "ClassDeclaration",
      "signature": "class Unit(value, unit)",
      "starter": "import { Unit } from \"nhb-toolbox\";\nconst inst = new Unit(value, unit);\nconsole.log(inst);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/Unit.d.ts"
    },
    {
      "name": "UnitConverter",
      "kind": "ClassDeclaration",
      "signature": "class UnitConverter(value, unit)",
      "starter": "import { UnitConverter } from \"nhb-toolbox\";\nconst inst = new UnitConverter(value, unit);\nconsole.log(inst);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "AlphaColors",
      "kind": "InterfaceDeclaration",
      "signature": "AlphaColors",
      "starter": "// Type: AlphaColors\nimport type { AlphaColors } from \"nhb-toolbox\";\nconsole.log(\"AlphaColors type available\");",
      "shortDoc": "- Colors Object that includes `Hex`, `RGB` and `HSL` formats of the same color.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "AnagramOptions",
      "kind": "InterfaceDeclaration",
      "signature": "AnagramOptions",
      "starter": "// Type: AnagramOptions\nimport type { AnagramOptions } from \"nhb-toolbox\";\nconsole.log(\"AnagramOptions type available\");",
      "shortDoc": "- Options for generating anagrams.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/types.d.ts"
    },
    {
      "name": "ApplyChangeOptions",
      "kind": "InterfaceDeclaration",
      "signature": "ApplyChangeOptions",
      "starter": "// Type: ApplyChangeOptions\nimport type { ApplyChangeOptions } from \"nhb-toolbox\";\nconsole.log(\"ApplyChangeOptions type available\");",
      "shortDoc": "Applies a percentage increase or decrease to a `baseValue`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "ArrayOfObjectsToStringOptions",
      "kind": "InterfaceDeclaration",
      "signature": "ArrayOfObjectsToStringOptions",
      "starter": "// Type: ArrayOfObjectsToStringOptions\nimport type { ArrayOfObjectsToStringOptions } from \"nhb-toolbox\";\nconsole.log(\"ArrayOfObjectsToStringOptions type available\");",
      "shortDoc": "Options for converting an object array to string using a nested key.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "ArrayOfPrimitivesToStringOptions",
      "kind": "InterfaceDeclaration",
      "signature": "ArrayOfPrimitivesToStringOptions",
      "starter": "// Type: ArrayOfPrimitivesToStringOptions\nimport type { ArrayOfPrimitivesToStringOptions } from \"nhb-toolbox\";\nconsole.log(\"ArrayOfPrimitivesToStringOptions type available\");",
      "shortDoc": "Options for converting a primitive array to string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "BusinessHourOptions",
      "kind": "InterfaceDeclaration",
      "signature": "BusinessHourOptions",
      "starter": "// Type: BusinessHourOptions\nimport type { BusinessHourOptions } from \"nhb-toolbox\";\nconsole.log(\"BusinessHourOptions type available\");",
      "shortDoc": "Options for configuring business hour",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "CapitalizeOptions",
      "kind": "InterfaceDeclaration",
      "signature": "CapitalizeOptions",
      "starter": "// Type: CapitalizeOptions\nimport type { CapitalizeOptions } from \"nhb-toolbox\";\nconsole.log(\"CapitalizeOptions type available\");",
      "shortDoc": "- Options for `capitalizeString` function.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/types.d.ts"
    },
    {
      "name": "ChronosInternals",
      "kind": "InterfaceDeclaration",
      "signature": "ChronosInternals",
      "starter": "// Type: ChronosInternals\nimport type { ChronosInternals } from \"nhb-toolbox\";\nconsole.log(\"ChronosInternals type available\");",
      "shortDoc": "Interface for accessing internal private properties in extended `Chronos` class",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ChronosObject",
      "kind": "InterfaceDeclaration",
      "signature": "ChronosObject",
      "starter": "// Type: ChronosObject\nimport type { ChronosObject } from \"nhb-toolbox\";\nconsole.log(\"ChronosObject type available\");",
      "shortDoc": "Iterable `Chronos` object properties",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ChronosStatics",
      "kind": "InterfaceDeclaration",
      "signature": "ChronosStatics",
      "starter": "// Type: ChronosStatics\nimport type { ChronosStatics } from \"nhb-toolbox\";\nconsole.log(\"ChronosStatics type available\");",
      "shortDoc": "All the statics methods in `Chronos` class",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ClassDetails",
      "kind": "InterfaceDeclaration",
      "signature": "ClassDetails",
      "starter": "// Type: ClassDetails\nimport type { ClassDetails } from \"nhb-toolbox\";\nconsole.log(\"ClassDetails type available\");",
      "shortDoc": "Represents detailed information about a class's methods.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "Colors",
      "kind": "InterfaceDeclaration",
      "signature": "Colors",
      "starter": "// Type: Colors\nimport type { Colors } from \"nhb-toolbox\";\nconsole.log(\"Colors type available\");",
      "shortDoc": "An Object representing all the colors from `Color` constructor.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "ConvertedColors",
      "kind": "InterfaceDeclaration",
      "signature": "ConvertedColors",
      "starter": "// Type: ConvertedColors\nimport type { ConvertedColors } from \"nhb-toolbox\";\nconsole.log(\"ConvertedColors type available\");",
      "shortDoc": "* Represents the converted color formats for a given color type.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "ConvertOptions",
      "kind": "InterfaceDeclaration",
      "signature": "ConvertOptions",
      "starter": "// Type: ConvertOptions\nimport type { ConvertOptions } from \"nhb-toolbox\";\nconsole.log(\"ConvertOptions type available\");",
      "shortDoc": "- Options for `convert` method in `Currency` class",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "CustomFile",
      "kind": "InterfaceDeclaration",
      "signature": "CustomFile",
      "starter": "// Type: CustomFile\nimport type { CustomFile } from \"nhb-toolbox\";\nconsole.log(\"CustomFile type available\");",
      "shortDoc": "Represents a custom file structure used in file upload components.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/types.d.ts"
    },
    {
      "name": "DateLike",
      "kind": "InterfaceDeclaration",
      "signature": "DateLike",
      "starter": "// Type: DateLike\nimport type { DateLike } from \"nhb-toolbox\";\nconsole.log(\"DateLike type available\");",
      "shortDoc": "Interface representing a date-like object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "DateRangeOptions",
      "kind": "InterfaceDeclaration",
      "signature": "DateRangeOptions",
      "starter": "// Type: DateRangeOptions\nimport type { DateRangeOptions } from \"nhb-toolbox\";\nconsole.log(\"DateRangeOptions type available\");",
      "shortDoc": "- Options to define a **fixed date range** using explicit `from` and `to` dates.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "DecimalOptions",
      "kind": "InterfaceDeclaration",
      "signature": "DecimalOptions",
      "starter": "// Type: DecimalOptions\nimport type { DecimalOptions } from \"nhb-toolbox\";\nconsole.log(\"DecimalOptions type available\");",
      "shortDoc": "- Decimal options for converting to decimal",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "FileError",
      "kind": "InterfaceDeclaration",
      "signature": "FileError",
      "starter": "// Type: FileError\nimport type { FileError } from \"nhb-toolbox\";\nconsole.log(\"FileError type available\");",
      "shortDoc": "Represents an error that occurs during a file upload.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/types.d.ts"
    },
    {
      "name": "FileUpload",
      "kind": "InterfaceDeclaration",
      "signature": "FileUpload",
      "starter": "// Type: FileUpload\nimport type { FileUpload } from \"nhb-toolbox\";\nconsole.log(\"FileUpload type available\");",
      "shortDoc": "Represents a file upload operation, commonly used in libraries like `FilePond` or `Ant Design Upload`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/types.d.ts"
    },
    {
      "name": "FindOptions",
      "kind": "InterfaceDeclaration",
      "signature": "FindOptions",
      "starter": "// Type: FindOptions\nimport type { FindOptions } from \"nhb-toolbox\";\nconsole.log(\"FindOptions type available\");",
      "shortDoc": "Options for customizing the search behavior.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/types.d.ts"
    },
    {
      "name": "FormatOptions",
      "kind": "InterfaceDeclaration",
      "signature": "FormatOptions",
      "starter": "// Type: FormatOptions\nimport type { FormatOptions } from \"nhb-toolbox\";\nconsole.log(\"FormatOptions type available\");",
      "shortDoc": "Chronos Date Format options",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "FormDataConfigs",
      "kind": "InterfaceDeclaration",
      "signature": "FormDataConfigs",
      "starter": "// Type: FormDataConfigs\nimport type { FormDataConfigs } from \"nhb-toolbox\";\nconsole.log(\"FormDataConfigs type available\");",
      "shortDoc": "- Configuration options to control FormData generation behavior.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/types.d.ts"
    },
    {
      "name": "FrankFurter",
      "kind": "InterfaceDeclaration",
      "signature": "FrankFurter",
      "starter": "// Type: FrankFurter\nimport type { FrankFurter } from \"nhb-toolbox\";\nconsole.log(\"FrankFurter type available\");",
      "shortDoc": "Type Interface for API Response from `api.frankfurter.app`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "GetChangeOptions",
      "kind": "InterfaceDeclaration",
      "signature": "GetChangeOptions",
      "starter": "// Type: GetChangeOptions\nimport type { GetChangeOptions } from \"nhb-toolbox\";\nconsole.log(\"GetChangeOptions type available\");",
      "shortDoc": "Calculates the percentage change from `oldValue` to `newValue`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "GetDifferenceOptions",
      "kind": "InterfaceDeclaration",
      "signature": "GetDifferenceOptions",
      "starter": "// Type: GetDifferenceOptions\nimport type { GetDifferenceOptions } from \"nhb-toolbox\";\nconsole.log(\"GetDifferenceOptions type available\");",
      "shortDoc": "Calculates the absolute percentage difference between two values.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "GetOriginalOptions",
      "kind": "InterfaceDeclaration",
      "signature": "GetOriginalOptions",
      "starter": "// Type: GetOriginalOptions\nimport type { GetOriginalOptions } from \"nhb-toolbox\";\nconsole.log(\"GetOriginalOptions type available\");",
      "shortDoc": "Options to calculate the original total from a known `value` and `percentage`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "GetPercentOptions",
      "kind": "InterfaceDeclaration",
      "signature": "GetPercentOptions",
      "starter": "// Type: GetPercentOptions\nimport type { GetPercentOptions } from \"nhb-toolbox\";\nconsole.log(\"GetPercentOptions type available\");",
      "shortDoc": "Options to calculate what percentage a `part` is of a `total`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "GetValueOptions",
      "kind": "InterfaceDeclaration",
      "signature": "GetValueOptions",
      "starter": "// Type: GetValueOptions\nimport type { GetValueOptions } from \"nhb-toolbox\";\nconsole.log(\"GetValueOptions type available\");",
      "shortDoc": "Options to calculate a value from a `percentage` of a `total`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "GreetingConfigs",
      "kind": "InterfaceDeclaration",
      "signature": "GreetingConfigs",
      "starter": "// Type: GreetingConfigs\nimport type { GreetingConfigs } from \"nhb-toolbox\";\nconsole.log(\"GreetingConfigs type available\");",
      "shortDoc": "- Configuration options for greeting.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "InversePercentageOptions",
      "kind": "InterfaceDeclaration",
      "signature": "InversePercentageOptions",
      "starter": "// Type: InversePercentageOptions\nimport type { InversePercentageOptions } from \"nhb-toolbox\";\nconsole.log(\"InversePercentageOptions type available\");",
      "shortDoc": "Calculates the inverse percentage: what percent `total` is of `part`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "MaskOptions",
      "kind": "InterfaceDeclaration",
      "signature": "MaskOptions",
      "starter": "// Type: MaskOptions\nimport type { MaskOptions } from \"nhb-toolbox\";\nconsole.log(\"MaskOptions type available\");",
      "shortDoc": "Options for masking a string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/types.d.ts"
    },
    {
      "name": "OptionsConfig",
      "kind": "InterfaceDeclaration",
      "signature": "OptionsConfig",
      "starter": "// Type: OptionsConfig\nimport type { OptionsConfig } from \"nhb-toolbox\";\nconsole.log(\"OptionsConfig type available\");",
      "shortDoc": "* Configuration for `createOptionsArray`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/types.d.ts"
    },
    {
      "name": "OrderOption",
      "kind": "InterfaceDeclaration",
      "signature": "OrderOption",
      "starter": "// Type: OrderOption\nimport type { OrderOption } from \"nhb-toolbox\";\nconsole.log(\"OrderOption type available\");",
      "shortDoc": "Option for sorting order.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/types.d.ts"
    },
    {
      "name": "OriginFileObj",
      "kind": "InterfaceDeclaration",
      "signature": "OriginFileObj",
      "starter": "// Type: OriginFileObj\nimport type { OriginFileObj } from \"nhb-toolbox\";\nconsole.log(\"OriginFileObj type available\");",
      "shortDoc": "Represents the original file object before any modifications.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/types.d.ts"
    },
    {
      "name": "PageListOptions",
      "kind": "InterfaceDeclaration",
      "signature": "PageListOptions",
      "starter": "// Type: PageListOptions\nimport type { PageListOptions } from \"nhb-toolbox\";\nconsole.log(\"PageListOptions type available\");",
      "shortDoc": "Options for pageList method.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "PaginatorMeta",
      "kind": "InterfaceDeclaration",
      "signature": "PaginatorMeta",
      "starter": "// Type: PaginatorMeta\nimport type { PaginatorMeta } from \"nhb-toolbox\";\nconsole.log(\"PaginatorMeta type available\");",
      "shortDoc": "Paginator metadata",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "PaginatorOptions",
      "kind": "InterfaceDeclaration",
      "signature": "PaginatorOptions",
      "starter": "// Type: PaginatorOptions\nimport type { PaginatorOptions } from \"nhb-toolbox\";\nconsole.log(\"PaginatorOptions type available\");",
      "shortDoc": "Options to initialize Paginator",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "PluralizeOptions",
      "kind": "InterfaceDeclaration",
      "signature": "PluralizeOptions",
      "starter": "// Type: PluralizeOptions\nimport type { PluralizeOptions } from \"nhb-toolbox\";\nconsole.log(\"PluralizeOptions type available\");",
      "shortDoc": "Options for pluralize method.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/pluralize/types.d.ts"
    },
    {
      "name": "RandomIdOptions",
      "kind": "InterfaceDeclaration",
      "signature": "RandomIdOptions",
      "starter": "// Type: RandomIdOptions\nimport type { RandomIdOptions } from \"nhb-toolbox\";\nconsole.log(\"RandomIdOptions type available\");",
      "shortDoc": "- Configuration options for ID generation.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/types.d.ts"
    },
    {
      "name": "RandomNumberOptions",
      "kind": "InterfaceDeclaration",
      "signature": "RandomNumberOptions",
      "starter": "// Type: RandomNumberOptions\nimport type { RandomNumberOptions } from \"nhb-toolbox\";\nconsole.log(\"RandomNumberOptions type available\");",
      "shortDoc": "- Options for random number generator",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "RangeOptions",
      "kind": "InterfaceDeclaration",
      "signature": "RangeOptions",
      "starter": "// Type: RangeOptions\nimport type { RangeOptions } from \"nhb-toolbox\";\nconsole.log(\"RangeOptions type available\");",
      "shortDoc": "- Options for generating numbers in a range",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "RangeWithDates",
      "kind": "InterfaceDeclaration",
      "signature": "RangeWithDates",
      "starter": "// Type: RangeWithDates\nimport type { RangeWithDates } from \"nhb-toolbox\";\nconsole.log(\"RangeWithDates type available\");",
      "shortDoc": "- Options to define a **fixed date range** using explicit `from` and `to` dates.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "RelativeDateRange",
      "kind": "InterfaceDeclaration",
      "signature": "RelativeDateRange",
      "starter": "// Type: RelativeDateRange\nimport type { RelativeDateRange } from \"nhb-toolbox\";\nconsole.log(\"RelativeDateRange type available\");",
      "shortDoc": "- Options to define a **relative date range** starting from the current date.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "RelativeRangeOptions",
      "kind": "InterfaceDeclaration",
      "signature": "RelativeRangeOptions",
      "starter": "// Type: RelativeRangeOptions\nimport type { RelativeRangeOptions } from \"nhb-toolbox\";\nconsole.log(\"RelativeRangeOptions type available\");",
      "shortDoc": "- Options to define a **relative date range** starting from the current date.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "SanitizeOptions",
      "kind": "InterfaceDeclaration",
      "signature": "SanitizeOptions",
      "starter": "// Type: SanitizeOptions\nimport type { SanitizeOptions } from \"nhb-toolbox\";\nconsole.log(\"SanitizeOptions type available\");",
      "shortDoc": "- Options for `sanitizeData` utility.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "SeasonDefinition",
      "kind": "InterfaceDeclaration",
      "signature": "SeasonDefinition",
      "starter": "// Type: SeasonDefinition\nimport type { SeasonDefinition } from \"nhb-toolbox\";\nconsole.log(\"SeasonDefinition type available\");",
      "shortDoc": "Season definition for season configuration",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "SeasonOptions",
      "kind": "InterfaceDeclaration",
      "signature": "SeasonOptions",
      "starter": "// Type: SeasonOptions\nimport type { SeasonOptions } from \"nhb-toolbox\";\nconsole.log(\"SeasonOptions type available\");",
      "shortDoc": "Options for configuring seasons",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "SolidColors",
      "kind": "InterfaceDeclaration",
      "signature": "SolidColors",
      "starter": "// Type: SolidColors\nimport type { SolidColors } from \"nhb-toolbox\";\nconsole.log(\"SolidColors type available\");",
      "shortDoc": "- Colors Object that includes `Hex8`, `RGBA` and `HSLA` formats of the same color.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "SortByOption",
      "kind": "InterfaceDeclaration",
      "signature": "SortByOption",
      "starter": "// Type: SortByOption\nimport type { SortByOption } from \"nhb-toolbox\";\nconsole.log(\"SortByOption type available\");",
      "shortDoc": "Options for setting sortByField for sorting an array of objects.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/types.d.ts"
    },
    {
      "name": "SortNature",
      "kind": "InterfaceDeclaration",
      "signature": "SortNature",
      "starter": "// Type: SortNature\nimport type { SortNature } from \"nhb-toolbox\";\nconsole.log(\"SortNature type available\");",
      "shortDoc": "Optional settings to configure comparison behavior.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/types.d.ts"
    },
    {
      "name": "StatusEntry",
      "kind": "InterfaceDeclaration",
      "signature": "StatusEntry",
      "starter": "// Type: StatusEntry\nimport type { StatusEntry } from \"nhb-toolbox\";\nconsole.log(\"StatusEntry type available\");",
      "shortDoc": "Shape of an HTTP status entry.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/http-status/types.d.ts"
    },
    {
      "name": "StringCaseOptions",
      "kind": "InterfaceDeclaration",
      "signature": "StringCaseOptions",
      "starter": "// Type: StringCaseOptions\nimport type { StringCaseOptions } from \"nhb-toolbox\";\nconsole.log(\"StringCaseOptions type available\");",
      "shortDoc": "Options for `convertStringCase`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/types.d.ts"
    },
    {
      "name": "TimeDuration",
      "kind": "InterfaceDeclaration",
      "signature": "TimeDuration",
      "starter": "// Type: TimeDuration\nimport type { TimeDuration } from \"nhb-toolbox\";\nconsole.log(\"TimeDuration type available\");",
      "shortDoc": "Return object type of `duration` method of `Chronos`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ZodiacOptions",
      "kind": "InterfaceDeclaration",
      "signature": "ZodiacOptions",
      "starter": "// Type: ZodiacOptions\nimport type { ZodiacOptions } from \"nhb-toolbox\";\nconsole.log(\"ZodiacOptions type available\");",
      "shortDoc": "Options for configuring Zodiac sign getter",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "AdvancedTypes",
      "kind": "TypeAliasDeclaration",
      "signature": "AdvancedTypes",
      "starter": "// Type: AdvancedTypes\nimport type { AdvancedTypes } from \"nhb-toolbox\";\nconsole.log(\"AdvancedTypes type available\");",
      "shortDoc": "Advanced types to exclude from counting as object key",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "AlphaValue",
      "kind": "TypeAliasDeclaration",
      "signature": "AlphaValue",
      "starter": "// Type: AlphaValue\nimport type { AlphaValue } from \"nhb-toolbox\";\nconsole.log(\"AlphaValue type available\");",
      "shortDoc": "Represents an alpha value between 0 and 1",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "AlphaValues",
      "kind": "TypeAliasDeclaration",
      "signature": "AlphaValues",
      "starter": "// Type: AlphaValues\nimport type { AlphaValues } from \"nhb-toolbox\";\nconsole.log(\"AlphaValues type available\");",
      "shortDoc": "Represents a tuple of four numerical values corresponding to RGBA or HSLA color components.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "Analogous",
      "kind": "TypeAliasDeclaration",
      "signature": "Analogous",
      "starter": "// Type: Analogous\nimport type { Analogous } from \"nhb-toolbox\";\nconsole.log(\"Analogous type available\");",
      "shortDoc": "Analogous colors",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "Any",
      "kind": "TypeAliasDeclaration",
      "signature": "Any",
      "starter": "// Type: Any\nimport type { Any } from \"nhb-toolbox\";\nconsole.log(\"Any type available\");",
      "shortDoc": "Uncontrolled any to use for edge cases",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "ArrayToStringOptions",
      "kind": "TypeAliasDeclaration",
      "signature": "ArrayToStringOptions",
      "starter": "// Type: ArrayToStringOptions\nimport type { ArrayToStringOptions } from \"nhb-toolbox\";\nconsole.log(\"ArrayToStringOptions type available\");",
      "shortDoc": "Combined options for array-to-string conversion.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "AsyncFunction",
      "kind": "TypeAliasDeclaration",
      "signature": "AsyncFunction",
      "starter": "// Type: AsyncFunction\nimport type { AsyncFunction } from \"nhb-toolbox\";\nconsole.log(\"AsyncFunction type available\");",
      "shortDoc": "Asynchronous function type",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "Branded",
      "kind": "TypeAliasDeclaration",
      "signature": "Branded",
      "starter": "// Type: Branded\nimport type { Branded } from \"nhb-toolbox\";\nconsole.log(\"Branded type available\");",
      "shortDoc": "Create a branded type.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "CaseFormat",
      "kind": "TypeAliasDeclaration",
      "signature": "CaseFormat",
      "starter": "// Type: CaseFormat\nimport type { CaseFormat } from \"nhb-toolbox\";\nconsole.log(\"CaseFormat type available\");",
      "shortDoc": "- Case formats for converting a string",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/types.d.ts"
    },
    {
      "name": "ChronosFormat",
      "kind": "TypeAliasDeclaration",
      "signature": "ChronosFormat",
      "starter": "// Type: ChronosFormat\nimport type { ChronosFormat } from \"nhb-toolbox\";\nconsole.log(\"ChronosFormat type available\");",
      "shortDoc": "Standard union formats for `Chronos`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ChronosInput",
      "kind": "TypeAliasDeclaration",
      "signature": "ChronosInput",
      "starter": "// Type: ChronosInput\nimport type { ChronosInput } from \"nhb-toolbox\";\nconsole.log(\"ChronosInput type available\");",
      "shortDoc": "* Accepted Input type for `Chronos`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ChronosMethods",
      "kind": "TypeAliasDeclaration",
      "signature": "ChronosMethods",
      "starter": "// Type: ChronosMethods\nimport type { ChronosMethods } from \"nhb-toolbox\";\nconsole.log(\"ChronosMethods type available\");",
      "shortDoc": "Methods (both instance and static) in `Chronos` class that return `Chronos` instance.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ChronosPlugin",
      "kind": "TypeAliasDeclaration",
      "signature": "ChronosPlugin",
      "starter": "// Type: ChronosPlugin\nimport type { ChronosPlugin } from \"nhb-toolbox\";\nconsole.log(\"ChronosPlugin type available\");",
      "shortDoc": "A plugin that augments the Chronos class with methods or properties.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ClockHour",
      "kind": "TypeAliasDeclaration",
      "signature": "ClockHour",
      "starter": "// Type: ClockHour\nimport type { ClockHour } from \"nhb-toolbox\";\nconsole.log(\"ClockHour type available\");",
      "shortDoc": "- Minute in numeric string from `00` to `23`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ClockMinute",
      "kind": "TypeAliasDeclaration",
      "signature": "ClockMinute",
      "starter": "// Type: ClockMinute\nimport type { ClockMinute } from \"nhb-toolbox\";\nconsole.log(\"ClockMinute type available\");",
      "shortDoc": "- Minute in numeric string from `00` to `59`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ClockSecond",
      "kind": "TypeAliasDeclaration",
      "signature": "ClockSecond",
      "starter": "// Type: ClockSecond\nimport type { ClockSecond } from \"nhb-toolbox\";\nconsole.log(\"ClockSecond type available\");",
      "shortDoc": "- Second in numeric string from `00` to `59`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ClockTime",
      "kind": "TypeAliasDeclaration",
      "signature": "ClockTime",
      "starter": "// Type: ClockTime\nimport type { ClockTime } from \"nhb-toolbox\";\nconsole.log(\"ClockTime type available\");",
      "shortDoc": "- Time in \"HH:MM\" format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ColorInput",
      "kind": "TypeAliasDeclaration",
      "signature": "ColorInput",
      "starter": "// Type: ColorInput\nimport type { ColorInput } from \"nhb-toolbox\";\nconsole.log(\"ColorInput type available\");",
      "shortDoc": "- A string, number for generating color.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "ColorInputArray",
      "kind": "TypeAliasDeclaration",
      "signature": "ColorInputArray",
      "starter": "// Type: ColorInputArray\nimport type { ColorInputArray } from \"nhb-toolbox\";\nconsole.log(\"ColorInputArray type available\");",
      "shortDoc": "- An array of strings/numbers or nested arrays of strings/numbers for generating colors.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "ColorType",
      "kind": "TypeAliasDeclaration",
      "signature": "ColorType",
      "starter": "// Type: ColorType\nimport type { ColorType } from \"nhb-toolbox\";\nconsole.log(\"ColorType type available\");",
      "shortDoc": "Union of Alpha & Solid `Hex`, `RGB` and `HSL`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "ColorTypeAlpha",
      "kind": "TypeAliasDeclaration",
      "signature": "ColorTypeAlpha",
      "starter": "// Type: ColorTypeAlpha\nimport type { ColorTypeAlpha } from \"nhb-toolbox\";\nconsole.log(\"ColorTypeAlpha type available\");",
      "shortDoc": "Union type representing a color in Hex8, RGBA, or HSLA format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "ColorTypeSolid",
      "kind": "TypeAliasDeclaration",
      "signature": "ColorTypeSolid",
      "starter": "// Type: ColorTypeSolid\nimport type { ColorTypeSolid } from \"nhb-toolbox\";\nconsole.log(\"ColorTypeSolid type available\");",
      "shortDoc": "Union type representing a color in Hex6, RGB, or HSL format.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "Constructor",
      "kind": "TypeAliasDeclaration",
      "signature": "Constructor",
      "starter": "// Type: Constructor\nimport type { Constructor } from \"nhb-toolbox\";\nconsole.log(\"Constructor type available\");",
      "shortDoc": "A generic class constructor",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "ConvertedDecimal",
      "kind": "TypeAliasDeclaration",
      "signature": "ConvertedDecimal",
      "starter": "// Type: ConvertedDecimal\nimport type { ConvertedDecimal } from \"nhb-toolbox\";\nconsole.log(\"ConvertedDecimal type available\");",
      "shortDoc": "- Converted decimal type either `number` or `string`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "CSSColor",
      "kind": "TypeAliasDeclaration",
      "signature": "CSSColor",
      "starter": "// Type: CSSColor\nimport type { CSSColor } from \"nhb-toolbox\";\nconsole.log(\"CSSColor type available\");",
      "shortDoc": "CSS named color, also includes different response colors",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "CurrencyCode",
      "kind": "TypeAliasDeclaration",
      "signature": "CurrencyCode",
      "starter": "// Type: CurrencyCode\nimport type { CurrencyCode } from \"nhb-toolbox\";\nconsole.log(\"CurrencyCode type available\");",
      "shortDoc": "List of ISO 4217 currency codes.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "DateBoundary",
      "kind": "TypeAliasDeclaration",
      "signature": "DateBoundary",
      "starter": "// Type: DateBoundary\nimport type { DateBoundary } from \"nhb-toolbox\";\nconsole.log(\"DateBoundary type available\");",
      "shortDoc": "ISO date-based range (format: `MM-DD`) e.g. `01-14` for 'January 14'",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "DateParts",
      "kind": "TypeAliasDeclaration",
      "signature": "DateParts",
      "starter": "// Type: DateParts\nimport type { DateParts } from \"nhb-toolbox\";\nconsole.log(\"DateParts type available\");",
      "shortDoc": "Standard date formats.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "DatesInRangeOptions",
      "kind": "TypeAliasDeclaration",
      "signature": "DatesInRangeOptions",
      "starter": "// Type: DatesInRangeOptions\nimport type { DatesInRangeOptions } from \"nhb-toolbox\";\nconsole.log(\"DatesInRangeOptions type available\");",
      "shortDoc": "- Unified type that supports either a fixed or relative date range configuration.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "DateString",
      "kind": "TypeAliasDeclaration",
      "signature": "DateString",
      "starter": "// Type: DateString\nimport type { DateString } from \"nhb-toolbox\";\nconsole.log(\"DateString type available\");",
      "shortDoc": "Date of the month as `0` padded numeric string e.g. `01`, `18`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "Day",
      "kind": "TypeAliasDeclaration",
      "signature": "Day",
      "starter": "// Type: Day\nimport type { Day } from \"nhb-toolbox\";\nconsole.log(\"Day type available\");",
      "shortDoc": "Day in either 2 letters or full word format",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "DayPart",
      "kind": "TypeAliasDeclaration",
      "signature": "DayPart",
      "starter": "// Type: DayPart\nimport type { DayPart } from \"nhb-toolbox\";\nconsole.log(\"DayPart type available\");",
      "shortDoc": "Definition of day part names.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "DayPartConfig",
      "kind": "TypeAliasDeclaration",
      "signature": "DayPartConfig",
      "starter": "// Type: DayPartConfig\nimport type { DayPartConfig } from \"nhb-toolbox\";\nconsole.log(\"DayPartConfig type available\");",
      "shortDoc": "Object type for extracting day parts.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "DeepKeyof",
      "kind": "TypeAliasDeclaration",
      "signature": "DeepKeyof",
      "starter": "// Type: DeepKeyof\nimport type { DeepKeyof } from \"nhb-toolbox\";\nconsole.log(\"DeepKeyof type available\");",
      "shortDoc": "* Recursively generates dot-separated keys from a nested object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "DeepPartial",
      "kind": "TypeAliasDeclaration",
      "signature": "DeepPartial",
      "starter": "// Type: DeepPartial\nimport type { DeepPartial } from \"nhb-toolbox\";\nconsole.log(\"DeepPartial type available\");",
      "shortDoc": "* Recursively makes all properties in an object type optional.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "DelayedFn",
      "kind": "TypeAliasDeclaration",
      "signature": "DelayedFn",
      "starter": "// Type: DelayedFn\nimport type { DelayedFn } from \"nhb-toolbox\";\nconsole.log(\"DelayedFn type available\");",
      "shortDoc": "Debounced function type after certain delay",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "DotNotationKey",
      "kind": "TypeAliasDeclaration",
      "signature": "DotNotationKey",
      "starter": "// Type: DotNotationKey\nimport type { DotNotationKey } from \"nhb-toolbox\";\nconsole.log(\"DotNotationKey type available\");",
      "shortDoc": "- Dot-notation keys for nested objects with `any` value (including optional properties)",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "DotNotationKeyStrict",
      "kind": "TypeAliasDeclaration",
      "signature": "DotNotationKeyStrict",
      "starter": "// Type: DotNotationKeyStrict\nimport type { DotNotationKeyStrict } from \"nhb-toolbox\";\nconsole.log(\"DotNotationKeyStrict type available\");",
      "shortDoc": "- Dot-notation keys for nested objects with unknown value (including optional properties)",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "DotValue",
      "kind": "TypeAliasDeclaration",
      "signature": "DotValue",
      "starter": "// Type: DotValue\nimport type { DotValue } from \"nhb-toolbox\";\nconsole.log(\"DotValue type available\");",
      "shortDoc": "- Gets the value at a dot-notation key path",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "Enumerate",
      "kind": "TypeAliasDeclaration",
      "signature": "Enumerate",
      "starter": "// Type: Enumerate\nimport type { Enumerate } from \"nhb-toolbox\";\nconsole.log(\"Enumerate type available\");",
      "shortDoc": "* Builds a union of numeric literals from `0` to `N - 1`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "Expand",
      "kind": "TypeAliasDeclaration",
      "signature": "Expand",
      "starter": "// Type: Expand\nimport type { Expand } from \"nhb-toolbox\";\nconsole.log(\"Expand type available\");",
      "shortDoc": "- Prettify all object properties into a readable form.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "ExtractOptional",
      "kind": "TypeAliasDeclaration",
      "signature": "ExtractOptional",
      "starter": "// Type: ExtractOptional\nimport type { ExtractOptional } from \"nhb-toolbox\";\nconsole.log(\"ExtractOptional type available\");",
      "shortDoc": "* Extracts an object type containing only the optional keys from `T`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "ExtractRequired",
      "kind": "TypeAliasDeclaration",
      "signature": "ExtractRequired",
      "starter": "// Type: ExtractRequired\nimport type { ExtractRequired } from \"nhb-toolbox\";\nconsole.log(\"ExtractRequired type available\");",
      "shortDoc": "* Extracts an object type containing only the required keys from `T`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "FalsyPrimitive",
      "kind": "TypeAliasDeclaration",
      "signature": "FalsyPrimitive",
      "starter": "// Type: FalsyPrimitive\nimport type { FalsyPrimitive } from \"nhb-toolbox\";\nconsole.log(\"FalsyPrimitive type available\");",
      "shortDoc": "Falsy primitive type",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "FieldValue",
      "kind": "TypeAliasDeclaration",
      "signature": "FieldValue",
      "starter": "// Type: FieldValue\nimport type { FieldValue } from \"nhb-toolbox\";\nconsole.log(\"FieldValue type available\");",
      "shortDoc": "Type of values for the option fields",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/types.d.ts"
    },
    {
      "name": "FirstFieldKey",
      "kind": "TypeAliasDeclaration",
      "signature": "FirstFieldKey",
      "starter": "// Type: FirstFieldKey\nimport type { FirstFieldKey } from \"nhb-toolbox\";\nconsole.log(\"FirstFieldKey type available\");",
      "shortDoc": "Type for first field key",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/types.d.ts"
    },
    {
      "name": "FirstFieldValue",
      "kind": "TypeAliasDeclaration",
      "signature": "FirstFieldValue",
      "starter": "// Type: FirstFieldValue\nimport type { FirstFieldValue } from \"nhb-toolbox\";\nconsole.log(\"FirstFieldValue type available\");",
      "shortDoc": "Type for firs field value",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/types.d.ts"
    },
    {
      "name": "Flattened",
      "kind": "TypeAliasDeclaration",
      "signature": "Flattened",
      "starter": "// Type: Flattened\nimport type { Flattened } from \"nhb-toolbox\";\nconsole.log(\"Flattened type available\");",
      "shortDoc": "Flatten Array or Wrap in Array",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/types.d.ts"
    },
    {
      "name": "FlattenKey",
      "kind": "TypeAliasDeclaration",
      "signature": "FlattenKey",
      "starter": "// Type: FlattenKey\nimport type { FlattenKey } from \"nhb-toolbox\";\nconsole.log(\"FlattenKey type available\");",
      "shortDoc": "- Dot-notation keys for flattened nested objects with `any` value (including optional properties)",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "FlattenLeafKey",
      "kind": "TypeAliasDeclaration",
      "signature": "FlattenLeafKey",
      "starter": "// Type: FlattenLeafKey\nimport type { FlattenLeafKey } from \"nhb-toolbox\";\nconsole.log(\"FlattenLeafKey type available\");",
      "shortDoc": "- Extracts only leaf-level key names (excluding objects/functions)",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "FlattenLeafValue",
      "kind": "TypeAliasDeclaration",
      "signature": "FlattenLeafValue",
      "starter": "// Type: FlattenLeafValue\nimport type { FlattenLeafValue } from \"nhb-toolbox\";\nconsole.log(\"FlattenLeafValue type available\");",
      "shortDoc": "- Final flattened object with only leaf keys",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "FlattenPartial",
      "kind": "TypeAliasDeclaration",
      "signature": "FlattenPartial",
      "starter": "// Type: FlattenPartial\nimport type { FlattenPartial } from \"nhb-toolbox\";\nconsole.log(\"FlattenPartial type available\");",
      "shortDoc": "Utility type to flatten Partial type",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "FlattenValue",
      "kind": "TypeAliasDeclaration",
      "signature": "FlattenValue",
      "starter": "// Type: FlattenValue\nimport type { FlattenValue } from \"nhb-toolbox\";\nconsole.log(\"FlattenValue type available\");",
      "shortDoc": "- Flattens the values of a nested object into a single level against the dot-notation key",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "FromMetaOptions",
      "kind": "TypeAliasDeclaration",
      "signature": "FromMetaOptions",
      "starter": "// Type: FromMetaOptions\nimport type { FromMetaOptions } from \"nhb-toolbox\";\nconsole.log(\"FromMetaOptions type available\");",
      "shortDoc": "Options for `fromMeta` method.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "GenericFn",
      "kind": "TypeAliasDeclaration",
      "signature": "GenericFn",
      "starter": "// Type: GenericFn\nimport type { GenericFn } from \"nhb-toolbox\";\nconsole.log(\"GenericFn type available\");",
      "shortDoc": "Generic function type",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "GenericObject",
      "kind": "TypeAliasDeclaration",
      "signature": "GenericObject",
      "starter": "// Type: GenericObject\nimport type { GenericObject } from \"nhb-toolbox\";\nconsole.log(\"GenericObject type available\");",
      "shortDoc": "- Generic object but with `any` value",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "GenericObjectPrimitive",
      "kind": "TypeAliasDeclaration",
      "signature": "GenericObjectPrimitive",
      "starter": "// Type: GenericObjectPrimitive\nimport type { GenericObjectPrimitive } from \"nhb-toolbox\";\nconsole.log(\"GenericObjectPrimitive type available\");",
      "shortDoc": "- Object type with string or number or boolean as value for each key.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "HasMethods",
      "kind": "TypeAliasDeclaration",
      "signature": "HasMethods",
      "starter": "// Type: HasMethods\nimport type { HasMethods } from \"nhb-toolbox\";\nconsole.log(\"HasMethods type available\");",
      "shortDoc": "Helper to detect if a type has methods",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "Hex",
      "kind": "TypeAliasDeclaration",
      "signature": "Hex",
      "starter": "// Type: Hex\nimport type { Hex } from \"nhb-toolbox\";\nconsole.log(\"Hex type available\");",
      "shortDoc": "* Represents a hexadecimal color code.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "Hex6",
      "kind": "TypeAliasDeclaration",
      "signature": "Hex6",
      "starter": "// Type: Hex6\nimport type { Hex6 } from \"nhb-toolbox\";\nconsole.log(\"Hex6 type available\");",
      "shortDoc": "* Represents a hexadecimal color code.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "Hex8",
      "kind": "TypeAliasDeclaration",
      "signature": "Hex8",
      "starter": "// Type: Hex8\nimport type { Hex8 } from \"nhb-toolbox\";\nconsole.log(\"Hex8 type available\");",
      "shortDoc": "* Represents a hexadecimal color code with optional alpha channel.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "Hour",
      "kind": "TypeAliasDeclaration",
      "signature": "Hour",
      "starter": "// Type: Hour\nimport type { Hour } from \"nhb-toolbox\";\nconsole.log(\"Hour type available\");",
      "shortDoc": "Second in either 1 or 2 digits format",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "HourMinutes",
      "kind": "TypeAliasDeclaration",
      "signature": "HourMinutes",
      "starter": "// Type: HourMinutes\nimport type { HourMinutes } from \"nhb-toolbox\";\nconsole.log(\"HourMinutes type available\");",
      "shortDoc": "Normal time in `H:m`m format which does not follow the strict limit up to 23 hours, hour can be any number and minute can be numeric string from `00` to `59`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "HSL",
      "kind": "TypeAliasDeclaration",
      "signature": "HSL",
      "starter": "// Type: HSL\nimport type { HSL } from \"nhb-toolbox\";\nconsole.log(\"HSL type available\");",
      "shortDoc": "* Represents an HSL color string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "HSLA",
      "kind": "TypeAliasDeclaration",
      "signature": "HSLA",
      "starter": "// Type: HSLA\nimport type { HSLA } from \"nhb-toolbox\";\nconsole.log(\"HSLA type available\");",
      "shortDoc": "* Represents an HSLA color string with optional alpha channel.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "HttpStatusName",
      "kind": "TypeAliasDeclaration",
      "signature": "HttpStatusName",
      "starter": "// Type: HttpStatusName\nimport type { HttpStatusName } from \"nhb-toolbox\";\nconsole.log(\"HttpStatusName type available\");",
      "shortDoc": "Name for the Status Code in both Human readable and Uppercase snake case",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/http-status/types.d.ts"
    },
    {
      "name": "Immutable",
      "kind": "TypeAliasDeclaration",
      "signature": "Immutable",
      "starter": "// Type: Immutable\nimport type { Immutable } from \"nhb-toolbox\";\nconsole.log(\"Immutable type available\");",
      "shortDoc": "* Recursively adds `readonly` to all properties of an object type.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "IrregularMap",
      "kind": "TypeAliasDeclaration",
      "signature": "IrregularMap",
      "starter": "// Type: IrregularMap\nimport type { IrregularMap } from \"nhb-toolbox\";\nconsole.log(\"IrregularMap type available\");",
      "shortDoc": "A map of irregular singular to plural forms.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/pluralize/types.d.ts"
    },
    {
      "name": "IsStrictObject",
      "kind": "TypeAliasDeclaration",
      "signature": "IsStrictObject",
      "starter": "// Type: IsStrictObject\nimport type { IsStrictObject } from \"nhb-toolbox\";\nconsole.log(\"IsStrictObject type available\");",
      "shortDoc": "* Checks whether a type is a strict object (excluding functions).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "KeyForArray",
      "kind": "TypeAliasDeclaration",
      "signature": "KeyForArray",
      "starter": "// Type: KeyForArray\nimport type { KeyForArray } from \"nhb-toolbox\";\nconsole.log(\"KeyForArray type available\");",
      "shortDoc": "- Object keys where the value is an array (including optional properties)",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "KeyForObject",
      "kind": "TypeAliasDeclaration",
      "signature": "KeyForObject",
      "starter": "// Type: KeyForObject\nimport type { KeyForObject } from \"nhb-toolbox\";\nconsole.log(\"KeyForObject type available\");",
      "shortDoc": "- Object keys where the value is a non-array/non-advanced type object (including optional properties)",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "Keyof",
      "kind": "TypeAliasDeclaration",
      "signature": "Keyof",
      "starter": "// Type: Keyof\nimport type { Keyof } from \"nhb-toolbox\";\nconsole.log(\"Keyof type available\");",
      "shortDoc": "* Returns the keyof `T` only if `T` is a non-function object, otherwise `null`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "KeysOfUnion",
      "kind": "TypeAliasDeclaration",
      "signature": "KeysOfUnion",
      "starter": "// Type: KeysOfUnion\nimport type { KeysOfUnion } from \"nhb-toolbox\";\nconsole.log(\"KeysOfUnion type available\");",
      "shortDoc": "* Gets all keys from a union of object types.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "LeafValue",
      "kind": "TypeAliasDeclaration",
      "signature": "LeafValue",
      "starter": "// Type: LeafValue\nimport type { LeafValue } from \"nhb-toolbox\";\nconsole.log(\"LeafValue type available\");",
      "shortDoc": "- Gets value for a flat leaf key (assumes no there are duplicates! Duplicates are merged into one),",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "LocaleCode",
      "kind": "TypeAliasDeclaration",
      "signature": "LocaleCode",
      "starter": "// Type: LocaleCode\nimport type { LocaleCode } from \"nhb-toolbox\";\nconsole.log(\"LocaleCode type available\");",
      "shortDoc": "- List of all supported BCP 47 locales",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "LooseLiteral",
      "kind": "TypeAliasDeclaration",
      "signature": "LooseLiteral",
      "starter": "// Type: LooseLiteral\nimport type { LooseLiteral } from \"nhb-toolbox\";\nconsole.log(\"LooseLiteral type available\");",
      "shortDoc": "* Broadens a literal union (typically `string` or `number`) to also accept any other value of the base type, without losing IntelliSense autocomplete for the provided literals.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "MapObjectValues",
      "kind": "TypeAliasDeclaration",
      "signature": "MapObjectValues",
      "starter": "// Type: MapObjectValues\nimport type { MapObjectValues } from \"nhb-toolbox\";\nconsole.log(\"MapObjectValues type available\");",
      "shortDoc": "* Maps all values of object `T` to a fixed type `R`, keeping original keys.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "Merge",
      "kind": "TypeAliasDeclaration",
      "signature": "Merge",
      "starter": "// Type: Merge\nimport type { Merge } from \"nhb-toolbox\";\nconsole.log(\"Merge type available\");",
      "shortDoc": "* Combines two object types. In case of conflicts, keys from `U` override `T`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "MergeAll",
      "kind": "TypeAliasDeclaration",
      "signature": "MergeAll",
      "starter": "// Type: MergeAll\nimport type { MergeAll } from \"nhb-toolbox\";\nconsole.log(\"MergeAll type available\");",
      "shortDoc": "- Merges all properties of the input objects into a single object type.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "Millisecond",
      "kind": "TypeAliasDeclaration",
      "signature": "Millisecond",
      "starter": "// Type: Millisecond\nimport type { Millisecond } from \"nhb-toolbox\";\nconsole.log(\"Millisecond type available\");",
      "shortDoc": "Millisecond in either 1 or 2 digits format",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "MilliSecond",
      "kind": "TypeAliasDeclaration",
      "signature": "MilliSecond",
      "starter": "// Type: MilliSecond\nimport type { MilliSecond } from \"nhb-toolbox\";\nconsole.log(\"MilliSecond type available\");",
      "shortDoc": "Millisecond from `0-999`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "Minute",
      "kind": "TypeAliasDeclaration",
      "signature": "Minute",
      "starter": "// Type: Minute\nimport type { Minute } from \"nhb-toolbox\";\nconsole.log(\"Minute type available\");",
      "shortDoc": "Second in either 1 or 2 digits format",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "Month",
      "kind": "TypeAliasDeclaration",
      "signature": "Month",
      "starter": "// Type: Month\nimport type { Month } from \"nhb-toolbox\";\nconsole.log(\"Month type available\");",
      "shortDoc": "Month in either 1 or 2 digits or 3 letters or full word format",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "MonthBoundary",
      "kind": "TypeAliasDeclaration",
      "signature": "MonthBoundary",
      "starter": "// Type: MonthBoundary\nimport type { MonthBoundary } from \"nhb-toolbox\";\nconsole.log(\"MonthBoundary type available\");",
      "shortDoc": "Inclusive month index-based range `0-11` (0 = January)",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "MonthDate",
      "kind": "TypeAliasDeclaration",
      "signature": "MonthDate",
      "starter": "// Type: MonthDate\nimport type { MonthDate } from \"nhb-toolbox\";\nconsole.log(\"MonthDate type available\");",
      "shortDoc": "Date in either 1 or 2 digits format",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "MonthDateString",
      "kind": "TypeAliasDeclaration",
      "signature": "MonthDateString",
      "starter": "// Type: MonthDateString\nimport type { MonthDateString } from \"nhb-toolbox\";\nconsole.log(\"MonthDateString type available\");",
      "shortDoc": "Date and month in `MM-DD` format, e.g. `01-12` means 'January 18'",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "MonthName",
      "kind": "TypeAliasDeclaration",
      "signature": "MonthName",
      "starter": "// Type: MonthName\nimport type { MonthName } from \"nhb-toolbox\";\nconsole.log(\"MonthName type available\");",
      "shortDoc": "- Represents the full name of a month, e.g., 'January', 'February' etc.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "MonthString",
      "kind": "TypeAliasDeclaration",
      "signature": "MonthString",
      "starter": "// Type: MonthString\nimport type { MonthString } from \"nhb-toolbox\";\nconsole.log(\"MonthString type available\");",
      "shortDoc": "Month as `0` padded numeric string, e.g. `02`, `01` etc.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "Mutable",
      "kind": "TypeAliasDeclaration",
      "signature": "Mutable",
      "starter": "// Type: Mutable\nimport type { Mutable } from \"nhb-toolbox\";\nconsole.log(\"Mutable type available\");",
      "shortDoc": "* Removes `readonly` modifiers from all properties of an object type.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "NegativeUTCHour",
      "kind": "TypeAliasDeclaration",
      "signature": "NegativeUTCHour",
      "starter": "// Type: NegativeUTCHour\nimport type { NegativeUTCHour } from \"nhb-toolbox\";\nconsole.log(\"NegativeUTCHour type available\");",
      "shortDoc": "Negative UTC hours",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "NestedKeyString",
      "kind": "TypeAliasDeclaration",
      "signature": "NestedKeyString",
      "starter": "// Type: NestedKeyString\nimport type { NestedKeyString } from \"nhb-toolbox\";\nconsole.log(\"NestedKeyString type available\");",
      "shortDoc": "- Extract only keys with string values from an object, including nested dot-notation keys.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "NestedPrimitiveKey",
      "kind": "TypeAliasDeclaration",
      "signature": "NestedPrimitiveKey",
      "starter": "// Type: NestedPrimitiveKey\nimport type { NestedPrimitiveKey } from \"nhb-toolbox\";\nconsole.log(\"NestedPrimitiveKey type available\");",
      "shortDoc": "- Extract only primitive keys from an object, including nested dot-notation keys.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "NonNullishPrimitiveKey",
      "kind": "TypeAliasDeclaration",
      "signature": "NonNullishPrimitiveKey",
      "starter": "// Type: NonNullishPrimitiveKey\nimport type { NonNullishPrimitiveKey } from \"nhb-toolbox\";\nconsole.log(\"NonNullishPrimitiveKey type available\");",
      "shortDoc": "Extract primitive (string, number or boolean) key(s) from an object",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "NormalPrimitive",
      "kind": "TypeAliasDeclaration",
      "signature": "NormalPrimitive",
      "starter": "// Type: NormalPrimitive\nimport type { NormalPrimitive } from \"nhb-toolbox\";\nconsole.log(\"NormalPrimitive type available\");",
      "shortDoc": "Union of Normal Primitive Types (i.e. `string | number | boolean | null | undefined`)",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "NormalPrimitiveKey",
      "kind": "TypeAliasDeclaration",
      "signature": "NormalPrimitiveKey",
      "starter": "// Type: NormalPrimitiveKey\nimport type { NormalPrimitiveKey } from \"nhb-toolbox\";\nconsole.log(\"NormalPrimitiveKey type available\");",
      "shortDoc": "Extract normal primitive key(s) (i.e. `string | number | boolean | null | undefined`) from an object",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "Numberified",
      "kind": "TypeAliasDeclaration",
      "signature": "Numberified",
      "starter": "// Type: Numberified\nimport type { Numberified } from \"nhb-toolbox\";\nconsole.log(\"Numberified type available\");",
      "shortDoc": "- Type of data value converted to `number`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "NumberRange",
      "kind": "TypeAliasDeclaration",
      "signature": "NumberRange",
      "starter": "// Type: NumberRange\nimport type { NumberRange } from \"nhb-toolbox\";\nconsole.log(\"NumberRange type available\");",
      "shortDoc": "* Creates a union type of all numeric literals starting from `From` up to `To`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "NumberType",
      "kind": "TypeAliasDeclaration",
      "signature": "NumberType",
      "starter": "// Type: NumberType\nimport type { NumberType } from \"nhb-toolbox\";\nconsole.log(\"NumberType type available\");",
      "shortDoc": "- Type of numbers to generate",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "Numeric",
      "kind": "TypeAliasDeclaration",
      "signature": "Numeric",
      "starter": "// Type: Numeric\nimport type { Numeric } from \"nhb-toolbox\";\nconsole.log(\"Numeric type available\");",
      "shortDoc": "Union of `number` and numeric string",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "NumericDotKey",
      "kind": "TypeAliasDeclaration",
      "signature": "NumericDotKey",
      "starter": "// Type: NumericDotKey\nimport type { NumericDotKey } from \"nhb-toolbox\";\nconsole.log(\"NumericDotKey type available\");",
      "shortDoc": "Extract only number, string, undefined and null keys from an object, including nested dot-notation keys.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "Objects",
      "kind": "TypeAliasDeclaration",
      "signature": "Objects",
      "starter": "// Type: Objects\nimport type { Objects } from \"nhb-toolbox\";\nconsole.log(\"Objects type available\");",
      "shortDoc": "- A tuple of generic objects",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "OmitByValue",
      "kind": "TypeAliasDeclaration",
      "signature": "OmitByValue",
      "starter": "// Type: OmitByValue\nimport type { OmitByValue } from \"nhb-toolbox\";\nconsole.log(\"OmitByValue type available\");",
      "shortDoc": "* Omits properties from an object type whose value types match `ValueType`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "OneOf",
      "kind": "TypeAliasDeclaration",
      "signature": "OneOf",
      "starter": "// Type: OneOf\nimport type { OneOf } from \"nhb-toolbox\";\nconsole.log(\"OneOf type available\");",
      "shortDoc": "* Creates a type that is either `T` or `U`, but not both at the same time.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "Option",
      "kind": "TypeAliasDeclaration",
      "signature": "Option",
      "starter": "// Type: Option\nimport type { Option } from \"nhb-toolbox\";\nconsole.log(\"Option type available\");",
      "shortDoc": "Type of an option in `OptionsArray`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/types.d.ts"
    },
    {
      "name": "OwnKeys",
      "kind": "TypeAliasDeclaration",
      "signature": "OwnKeys",
      "starter": "// Type: OwnKeys\nimport type { OwnKeys } from \"nhb-toolbox\";\nconsole.log(\"OwnKeys type available\");",
      "shortDoc": "* Keys of an object that are part of the object type itself.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "ParsedFormData",
      "kind": "TypeAliasDeclaration",
      "signature": "ParsedFormData",
      "starter": "// Type: ParsedFormData\nimport type { ParsedFormData } from \"nhb-toolbox\";\nconsole.log(\"ParsedFormData type available\");",
      "shortDoc": "Represents the parsed form data.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/types.d.ts"
    },
    {
      "name": "PartialOrRequired",
      "kind": "TypeAliasDeclaration",
      "signature": "PartialOrRequired",
      "starter": "// Type: PartialOrRequired\nimport type { PartialOrRequired } from \"nhb-toolbox\";\nconsole.log(\"PartialOrRequired type available\");",
      "shortDoc": "Literal type for `partial` and `required`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "Percent",
      "kind": "TypeAliasDeclaration",
      "signature": "Percent",
      "starter": "// Type: Percent\nimport type { Percent } from \"nhb-toolbox\";\nconsole.log(\"Percent type available\");",
      "shortDoc": "- Number value in percentage `(0% - 100%)` without `%` symbol.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "PercentageOptions",
      "kind": "TypeAliasDeclaration",
      "signature": "PercentageOptions",
      "starter": "// Type: PercentageOptions\nimport type { PercentageOptions } from \"nhb-toolbox\";\nconsole.log(\"PercentageOptions type available\");",
      "shortDoc": "Options for calculating percentages and related values.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "PickByValue",
      "kind": "TypeAliasDeclaration",
      "signature": "PickByValue",
      "starter": "// Type: PickByValue\nimport type { PickByValue } from \"nhb-toolbox\";\nconsole.log(\"PickByValue type available\");",
      "shortDoc": "* Creates a new type by picking properties from `T` whose values extend type `V`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "PluralizeRule",
      "kind": "TypeAliasDeclaration",
      "signature": "PluralizeRule",
      "starter": "// Type: PluralizeRule\nimport type { PluralizeRule } from \"nhb-toolbox\";\nconsole.log(\"PluralizeRule type available\");",
      "shortDoc": "A pair of RegExp and replacement for pluralization rules",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/pluralize/types.d.ts"
    },
    {
      "name": "PositiveUTCHour",
      "kind": "TypeAliasDeclaration",
      "signature": "PositiveUTCHour",
      "starter": "// Type: PositiveUTCHour\nimport type { PositiveUTCHour } from \"nhb-toolbox\";\nconsole.log(\"PositiveUTCHour type available\");",
      "shortDoc": "Positive UTC hours",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "Prettify",
      "kind": "TypeAliasDeclaration",
      "signature": "Prettify",
      "starter": "// Type: Prettify\nimport type { Prettify } from \"nhb-toolbox\";\nconsole.log(\"Prettify type available\");",
      "shortDoc": "* Forces TypeScript to simplify a complex or inferred type into a more readable flat object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "Primitive",
      "kind": "TypeAliasDeclaration",
      "signature": "Primitive",
      "starter": "// Type: Primitive\nimport type { Primitive } from \"nhb-toolbox\";\nconsole.log(\"Primitive type available\");",
      "shortDoc": "Union of All Primitive Types (i.e. `string | number | boolean | symbol | bigint | null | undefined`)",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "Quarter",
      "kind": "TypeAliasDeclaration",
      "signature": "Quarter",
      "starter": "// Type: Quarter\nimport type { Quarter } from \"nhb-toolbox\";\nconsole.log(\"Quarter type available\");",
      "shortDoc": "Quarters of the year",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "QueryObject",
      "kind": "TypeAliasDeclaration",
      "signature": "QueryObject",
      "starter": "// Type: QueryObject\nimport type { QueryObject } from \"nhb-toolbox\";\nconsole.log(\"QueryObject type available\");",
      "shortDoc": "* Represents a query object with string keys and `QueryObjectValue` values.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "QueryObjectValue",
      "kind": "TypeAliasDeclaration",
      "signature": "QueryObjectValue",
      "starter": "// Type: QueryObjectValue\nimport type { QueryObjectValue } from \"nhb-toolbox\";\nconsole.log(\"QueryObjectValue type available\");",
      "shortDoc": "* Represents a value that can be used in a query object.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "QueryString",
      "kind": "TypeAliasDeclaration",
      "signature": "QueryString",
      "starter": "// Type: QueryString\nimport type { QueryString } from \"nhb-toolbox\";\nconsole.log(\"QueryString type available\");",
      "shortDoc": "Formatted query string as `?${string}` = `?key=value&...` or empty string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/types.d.ts"
    },
    {
      "name": "RangedNumbers",
      "kind": "TypeAliasDeclaration",
      "signature": "RangedNumbers",
      "starter": "// Type: RangedNumbers\nimport type { RangedNumbers } from \"nhb-toolbox\";\nconsole.log(\"RangedNumbers type available\");",
      "shortDoc": "- The return type of the `getNumbersInRange` function",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "RemoveNever",
      "kind": "TypeAliasDeclaration",
      "signature": "RemoveNever",
      "starter": "// Type: RemoveNever\nimport type { RemoveNever } from \"nhb-toolbox\";\nconsole.log(\"RemoveNever type available\");",
      "shortDoc": "* Removes properties from object `T` whose type is `never`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "RenameKeys",
      "kind": "TypeAliasDeclaration",
      "signature": "RenameKeys",
      "starter": "// Type: RenameKeys\nimport type { RenameKeys } from \"nhb-toolbox\";\nconsole.log(\"RenameKeys type available\");",
      "shortDoc": "* Renames the keys of `T` using the mapping `R`.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "RequireOnly",
      "kind": "TypeAliasDeclaration",
      "signature": "RequireOnly",
      "starter": "// Type: RequireOnly\nimport type { RequireOnly } from \"nhb-toolbox\";\nconsole.log(\"RequireOnly type available\");",
      "shortDoc": "* Makes only the specified keys in a type required; others remain optional.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "RGB",
      "kind": "TypeAliasDeclaration",
      "signature": "RGB",
      "starter": "// Type: RGB\nimport type { RGB } from \"nhb-toolbox\";\nconsole.log(\"RGB type available\");",
      "shortDoc": "* Represents an RGB color string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "RGBA",
      "kind": "TypeAliasDeclaration",
      "signature": "RGBA",
      "starter": "// Type: RGBA\nimport type { RGBA } from \"nhb-toolbox\";\nconsole.log(\"RGBA type available\");",
      "shortDoc": "* Represents an RGBA color string, now includes optional alpha (opacity).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "SeasonPreset",
      "kind": "TypeAliasDeclaration",
      "signature": "SeasonPreset",
      "starter": "// Type: SeasonPreset\nimport type { SeasonPreset } from \"nhb-toolbox\";\nconsole.log(\"SeasonPreset type available\");",
      "shortDoc": "Name of a predefined season preset",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "Second",
      "kind": "TypeAliasDeclaration",
      "signature": "Second",
      "starter": "// Type: Second\nimport type { Second } from \"nhb-toolbox\";\nconsole.log(\"Second type available\");",
      "shortDoc": "Second in either 1 or 2 digits format",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "SerializedForm",
      "kind": "TypeAliasDeclaration",
      "signature": "SerializedForm",
      "starter": "// Type: SerializedForm\nimport type { SerializedForm } from \"nhb-toolbox\";\nconsole.log(\"SerializedForm type available\");",
      "shortDoc": "THe return type of `serializeForm` wither as object or query string.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/types.d.ts"
    },
    {
      "name": "SIPrefix",
      "kind": "TypeAliasDeclaration",
      "signature": "SIPrefix",
      "starter": "// Type: SIPrefix\nimport type { SIPrefix } from \"nhb-toolbox\";\nconsole.log(\"SIPrefix type available\");",
      "shortDoc": "- Prefixes for SI units",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "SolidValues",
      "kind": "TypeAliasDeclaration",
      "signature": "SolidValues",
      "starter": "// Type: SolidValues\nimport type { SolidValues } from \"nhb-toolbox\";\nconsole.log(\"SolidValues type available\");",
      "shortDoc": "Represents a tuple of three numerical values corresponding to RGB or HSL color components.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "SortOptions",
      "kind": "TypeAliasDeclaration",
      "signature": "SortOptions",
      "starter": "// Type: SortOptions\nimport type { SortOptions } from \"nhb-toolbox\";\nconsole.log(\"SortOptions type available\");",
      "shortDoc": "Options for sorting array.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/types.d.ts"
    },
    {
      "name": "StatusCategory",
      "kind": "TypeAliasDeclaration",
      "signature": "StatusCategory",
      "starter": "// Type: StatusCategory\nimport type { StatusCategory } from \"nhb-toolbox\";\nconsole.log(\"StatusCategory type available\");",
      "shortDoc": "Categories of HTTP status codes: `\"informational\"`, `\"success\"`, `\"redirection\"`, `\"clientError`\" or `\"serverError\"`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/http-status/types.d.ts"
    },
    {
      "name": "StatusCode",
      "kind": "TypeAliasDeclaration",
      "signature": "StatusCode",
      "starter": "// Type: StatusCode\nimport type { StatusCode } from \"nhb-toolbox\";\nconsole.log(\"StatusCode type available\");",
      "shortDoc": "HTTP Status Code, e.g. `404`, `500` etc.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/http-status/types.d.ts"
    },
    {
      "name": "StatusName",
      "kind": "TypeAliasDeclaration",
      "signature": "StatusName",
      "starter": "// Type: StatusName\nimport type { StatusName } from \"nhb-toolbox\";\nconsole.log(\"StatusName type available\");",
      "shortDoc": "Name for the Status Code in Uppercase snake case, e.g. `\"NOT_FOUND\"`, `\"INTERNAL_SERVER_ERROR\"`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/http-status/types.d.ts"
    },
    {
      "name": "StatusNameReadable",
      "kind": "TypeAliasDeclaration",
      "signature": "StatusNameReadable",
      "starter": "// Type: StatusNameReadable\nimport type { StatusNameReadable } from \"nhb-toolbox\";\nconsole.log(\"StatusNameReadable type available\");",
      "shortDoc": "Name for the Status Code in Human readable form, e.g. `\"Not Found\"`, `\"Internal Server Error\"`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/http-status/types.d.ts"
    },
    {
      "name": "StrictFormat",
      "kind": "TypeAliasDeclaration",
      "signature": "StrictFormat",
      "starter": "// Type: StrictFormat\nimport type { StrictFormat } from \"nhb-toolbox\";\nconsole.log(\"StrictFormat type available\");",
      "shortDoc": "Strict pre-defined types for formatting date and time.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "StrictObject",
      "kind": "TypeAliasDeclaration",
      "signature": "StrictObject",
      "starter": "// Type: StrictObject\nimport type { StrictObject } from \"nhb-toolbox\";\nconsole.log(\"StrictObject type available\");",
      "shortDoc": "- Generic object with `unknown` value",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "Stringified",
      "kind": "TypeAliasDeclaration",
      "signature": "Stringified",
      "starter": "// Type: Stringified\nimport type { Stringified } from \"nhb-toolbox\";\nconsole.log(\"Stringified type available\");",
      "shortDoc": "- Type of data value converted to `string`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/types.d.ts"
    },
    {
      "name": "SupportedCurrency",
      "kind": "TypeAliasDeclaration",
      "signature": "SupportedCurrency",
      "starter": "// Type: SupportedCurrency\nimport type { SupportedCurrency } from \"nhb-toolbox\";\nconsole.log(\"SupportedCurrency type available\");",
      "shortDoc": "Fiat currencies supported by Frankfurter API",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "Tetrad",
      "kind": "TypeAliasDeclaration",
      "signature": "Tetrad",
      "starter": "// Type: Tetrad\nimport type { Tetrad } from \"nhb-toolbox\";\nconsole.log(\"Tetrad type available\");",
      "shortDoc": "Tetrad color",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "ThrottledFn",
      "kind": "TypeAliasDeclaration",
      "signature": "ThrottledFn",
      "starter": "// Type: ThrottledFn\nimport type { ThrottledFn } from \"nhb-toolbox\";\nconsole.log(\"ThrottledFn type available\");",
      "shortDoc": "Throttled function type after specific delay",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "TimeFormats",
      "kind": "TypeAliasDeclaration",
      "signature": "TimeFormats",
      "starter": "// Type: TimeFormats\nimport type { TimeFormats } from \"nhb-toolbox\";\nconsole.log(\"TimeFormats type available\");",
      "shortDoc": "Time formats in either capital or lowercase `am/pm` format",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "TimeParts",
      "kind": "TypeAliasDeclaration",
      "signature": "TimeParts",
      "starter": "// Type: TimeParts\nimport type { TimeParts } from \"nhb-toolbox\";\nconsole.log(\"TimeParts type available\");",
      "shortDoc": "Standard Time Formats",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "TimeUnit",
      "kind": "TypeAliasDeclaration",
      "signature": "TimeUnit",
      "starter": "// Type: TimeUnit\nimport type { TimeUnit } from \"nhb-toolbox\";\nconsole.log(\"TimeUnit type available\");",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "TimeZone",
      "kind": "TypeAliasDeclaration",
      "signature": "TimeZone",
      "starter": "// Type: TimeZone\nimport type { TimeZone } from \"nhb-toolbox\";\nconsole.log(\"TimeZone type available\");",
      "shortDoc": "Names of time-zones",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "Triad",
      "kind": "TypeAliasDeclaration",
      "signature": "Triad",
      "starter": "// Type: Triad\nimport type { Triad } from \"nhb-toolbox\";\nconsole.log(\"Triad type available\");",
      "shortDoc": "Triad color",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/types.d.ts"
    },
    {
      "name": "TupleOf",
      "kind": "TypeAliasDeclaration",
      "signature": "TupleOf",
      "starter": "// Type: TupleOf\nimport type { TupleOf } from \"nhb-toolbox\";\nconsole.log(\"TupleOf type available\");",
      "shortDoc": "* Creates a tuple type of a given length with elements of type T",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "TupleToUnion",
      "kind": "TypeAliasDeclaration",
      "signature": "TupleToUnion",
      "starter": "// Type: TupleToUnion\nimport type { TupleToUnion } from \"nhb-toolbox\";\nconsole.log(\"TupleToUnion type available\");",
      "shortDoc": "* Converts a readonly tuple to a union of its element types.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "UnitKey",
      "kind": "TypeAliasDeclaration",
      "signature": "UnitKey",
      "starter": "// Type: UnitKey\nimport type { UnitKey } from \"nhb-toolbox\";\nconsole.log(\"UnitKey type available\");",
      "shortDoc": "- Short forms of units",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "UnitLabel",
      "kind": "TypeAliasDeclaration",
      "signature": "UnitLabel",
      "starter": "// Type: UnitLabel\nimport type { UnitLabel } from \"nhb-toolbox\";\nconsole.log(\"UnitLabel type available\");",
      "shortDoc": "- Labels for the units",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "UnitNumberMethods",
      "kind": "TypeAliasDeclaration",
      "signature": "UnitNumberMethods",
      "starter": "// Type: UnitNumberMethods\nimport type { UnitNumberMethods } from \"nhb-toolbox\";\nconsole.log(\"UnitNumberMethods type available\");",
      "shortDoc": "Static methods from `Unit` class that accept a single number argument and return a number.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/types.d.ts"
    },
    {
      "name": "UTCMinute",
      "kind": "TypeAliasDeclaration",
      "signature": "UTCMinute",
      "starter": "// Type: UTCMinute\nimport type { UTCMinute } from \"nhb-toolbox\";\nconsole.log(\"UTCMinute type available\");",
      "shortDoc": "UTC Minutes as quarters",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "UTCOffSet",
      "kind": "TypeAliasDeclaration",
      "signature": "UTCOffSet",
      "starter": "// Type: UTCOffSet\nimport type { UTCOffSet } from \"nhb-toolbox\";\nconsole.log(\"UTCOffSet type available\");",
      "shortDoc": "UTC offset as `UTC-HH:MM` format",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ValueOf",
      "kind": "TypeAliasDeclaration",
      "signature": "ValueOf",
      "starter": "// Type: ValueOf\nimport type { ValueOf } from \"nhb-toolbox\";\nconsole.log(\"ValueOf type available\");",
      "shortDoc": "* Extracts the union of all property value types from a given object type.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "ValueOptional",
      "kind": "TypeAliasDeclaration",
      "signature": "ValueOptional",
      "starter": "// Type: ValueOptional\nimport type { ValueOptional } from \"nhb-toolbox\";\nconsole.log(\"ValueOptional type available\");",
      "shortDoc": "* Makes selected or all properties of an object type optional (only the values, not the keys).",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/types.d.ts"
    },
    {
      "name": "VoidFunction",
      "kind": "TypeAliasDeclaration",
      "signature": "VoidFunction",
      "starter": "// Type: VoidFunction\nimport type { VoidFunction } from \"nhb-toolbox\";\nconsole.log(\"VoidFunction type available\");",
      "shortDoc": "Generic function type that returns `void`",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/types/index.d.ts"
    },
    {
      "name": "WeekDay",
      "kind": "TypeAliasDeclaration",
      "signature": "WeekDay",
      "starter": "// Type: WeekDay\nimport type { WeekDay } from \"nhb-toolbox\";\nconsole.log(\"WeekDay type available\");",
      "shortDoc": "- Represents the full name of a weekday, e.g., 'Monday', 'Tuesday' etc.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "WeekdayOptions",
      "kind": "TypeAliasDeclaration",
      "signature": "WeekdayOptions",
      "starter": "// Type: WeekdayOptions\nimport type { WeekdayOptions } from \"nhb-toolbox\";\nconsole.log(\"WeekdayOptions type available\");",
      "shortDoc": "- Unified type that supports either a fixed or relative date range configuration.",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "WithoutOrigin",
      "kind": "TypeAliasDeclaration",
      "signature": "WithoutOrigin",
      "starter": "// Type: WithoutOrigin\nimport type { WithoutOrigin } from \"nhb-toolbox\";\nconsole.log(\"WithoutOrigin type available\");",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "Year",
      "kind": "TypeAliasDeclaration",
      "signature": "Year",
      "starter": "// Type: Year\nimport type { Year } from \"nhb-toolbox\";\nconsole.log(\"Year type available\");",
      "shortDoc": "Year in either 4 or 2 digits format",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ZodiacArray",
      "kind": "TypeAliasDeclaration",
      "signature": "ZodiacArray",
      "starter": "// Type: ZodiacArray\nimport type { ZodiacArray } from \"nhb-toolbox\";\nconsole.log(\"ZodiacArray type available\");",
      "shortDoc": "Shape of Zodiac signs array",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ZodiacPreset",
      "kind": "TypeAliasDeclaration",
      "signature": "ZodiacPreset",
      "starter": "// Type: ZodiacPreset\nimport type { ZodiacPreset } from \"nhb-toolbox\";\nconsole.log(\"ZodiacPreset type available\");",
      "shortDoc": "Presets for Zodiac Sign Configuration",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "ZodiacSign",
      "kind": "TypeAliasDeclaration",
      "signature": "ZodiacSign",
      "starter": "// Type: ZodiacSign\nimport type { ZodiacSign } from \"nhb-toolbox\";\nconsole.log(\"ZodiacSign type available\");",
      "shortDoc": "Names of Zodiac signs",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/types.d.ts"
    },
    {
      "name": "businessPlugin",
      "kind": "VariableDeclaration",
      "signature": "businessPlugin",
      "starter": "import { businessPlugin } from \"nhb-toolbox\";\nconsole.log(businessPlugin);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/plugins/businessPlugin.d.ts"
    },
    {
      "name": "calculateGCD",
      "kind": "VariableDeclaration",
      "signature": "calculateGCD",
      "starter": "import { calculateGCD } from \"nhb-toolbox\";\nconsole.log(calculateGCD);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "calculateHCF",
      "kind": "VariableDeclaration",
      "signature": "calculateHCF",
      "starter": "import { calculateHCF } from \"nhb-toolbox\";\nconsole.log(calculateHCF);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "calculateHCF",
      "kind": "VariableDeclaration",
      "signature": "calculateHCF",
      "starter": "import { calculateHCF } from \"nhb-toolbox\";\nconsole.log(calculateHCF);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/basics.d.ts"
    },
    {
      "name": "calculateLCD",
      "kind": "VariableDeclaration",
      "signature": "calculateLCD",
      "starter": "import { calculateLCD } from \"nhb-toolbox\";\nconsole.log(calculateLCD);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "calculateLCM",
      "kind": "VariableDeclaration",
      "signature": "calculateLCM",
      "starter": "import { calculateLCM } from \"nhb-toolbox\";\nconsole.log(calculateLCM);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "calculateLCM",
      "kind": "VariableDeclaration",
      "signature": "calculateLCM",
      "starter": "import { calculateLCM } from \"nhb-toolbox\";\nconsole.log(calculateLCM);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/basics.d.ts"
    },
    {
      "name": "cardinalToOrdinal",
      "kind": "VariableDeclaration",
      "signature": "cardinalToOrdinal",
      "starter": "import { cardinalToOrdinal } from \"nhb-toolbox\";\nconsole.log(cardinalToOrdinal);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "chronos",
      "kind": "VariableDeclaration",
      "signature": "chronos",
      "starter": "import { chronos } from \"nhb-toolbox\";\nconsole.log(chronos);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "chronos",
      "kind": "VariableDeclaration",
      "signature": "chronos",
      "starter": "import { chronos } from \"nhb-toolbox\";\nconsole.log(chronos);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/chronos-fn.d.ts"
    },
    {
      "name": "chronosjs",
      "kind": "VariableDeclaration",
      "signature": "chronosjs",
      "starter": "import { chronosjs } from \"nhb-toolbox\";\nconsole.log(chronosjs);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "chronosts",
      "kind": "VariableDeclaration",
      "signature": "chronosts",
      "starter": "import { chronosts } from \"nhb-toolbox\";\nconsole.log(chronosts);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "chronus",
      "kind": "VariableDeclaration",
      "signature": "chronus",
      "starter": "import { chronus } from \"nhb-toolbox\";\nconsole.log(chronus);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "chronusjs",
      "kind": "VariableDeclaration",
      "signature": "chronusjs",
      "starter": "import { chronusjs } from \"nhb-toolbox\";\nconsole.log(chronusjs);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "chronusts",
      "kind": "VariableDeclaration",
      "signature": "chronusts",
      "starter": "import { chronusts } from \"nhb-toolbox\";\nconsole.log(chronusts);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "clampNumber",
      "kind": "VariableDeclaration",
      "signature": "clampNumber",
      "starter": "import { clampNumber } from \"nhb-toolbox\";\nconsole.log(clampNumber);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "clampNumber",
      "kind": "VariableDeclaration",
      "signature": "clampNumber",
      "starter": "import { clampNumber } from \"nhb-toolbox\";\nconsole.log(clampNumber);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/utilities.d.ts"
    },
    {
      "name": "cloneObject",
      "kind": "VariableDeclaration",
      "signature": "cloneObject",
      "starter": "import { cloneObject } from \"nhb-toolbox\";\nconsole.log(cloneObject);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "cloneObject",
      "kind": "VariableDeclaration",
      "signature": "cloneObject",
      "starter": "import { cloneObject } from \"nhb-toolbox\";\nconsole.log(cloneObject);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/basics.d.ts"
    },
    {
      "name": "convertHex8ToHsla",
      "kind": "VariableDeclaration",
      "signature": "convertHex8ToHsla",
      "starter": "import { convertHex8ToHsla } from \"nhb-toolbox\";\nconsole.log(convertHex8ToHsla);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertHex8ToHsla",
      "kind": "VariableDeclaration",
      "signature": "convertHex8ToHsla",
      "starter": "import { convertHex8ToHsla } from \"nhb-toolbox\";\nconsole.log(convertHex8ToHsla);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertHex8ToRgba",
      "kind": "VariableDeclaration",
      "signature": "convertHex8ToRgba",
      "starter": "import { convertHex8ToRgba } from \"nhb-toolbox\";\nconsole.log(convertHex8ToRgba);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertHex8ToRgba",
      "kind": "VariableDeclaration",
      "signature": "convertHex8ToRgba",
      "starter": "import { convertHex8ToRgba } from \"nhb-toolbox\";\nconsole.log(convertHex8ToRgba);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertHexToHsl",
      "kind": "VariableDeclaration",
      "signature": "convertHexToHsl",
      "starter": "import { convertHexToHsl } from \"nhb-toolbox\";\nconsole.log(convertHexToHsl);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertHexToHsl",
      "kind": "VariableDeclaration",
      "signature": "convertHexToHsl",
      "starter": "import { convertHexToHsl } from \"nhb-toolbox\";\nconsole.log(convertHexToHsl);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertHexToRgb",
      "kind": "VariableDeclaration",
      "signature": "convertHexToRgb",
      "starter": "import { convertHexToRgb } from \"nhb-toolbox\";\nconsole.log(convertHexToRgb);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertHexToRgb",
      "kind": "VariableDeclaration",
      "signature": "convertHexToRgb",
      "starter": "import { convertHexToRgb } from \"nhb-toolbox\";\nconsole.log(convertHexToRgb);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertHslaToHex8",
      "kind": "VariableDeclaration",
      "signature": "convertHslaToHex8",
      "starter": "import { convertHslaToHex8 } from \"nhb-toolbox\";\nconsole.log(convertHslaToHex8);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertHslaToHex8",
      "kind": "VariableDeclaration",
      "signature": "convertHslaToHex8",
      "starter": "import { convertHslaToHex8 } from \"nhb-toolbox\";\nconsole.log(convertHslaToHex8);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertHslaToRgba",
      "kind": "VariableDeclaration",
      "signature": "convertHslaToRgba",
      "starter": "import { convertHslaToRgba } from \"nhb-toolbox\";\nconsole.log(convertHslaToRgba);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertHslaToRgba",
      "kind": "VariableDeclaration",
      "signature": "convertHslaToRgba",
      "starter": "import { convertHslaToRgba } from \"nhb-toolbox\";\nconsole.log(convertHslaToRgba);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertHslToHex",
      "kind": "VariableDeclaration",
      "signature": "convertHslToHex",
      "starter": "import { convertHslToHex } from \"nhb-toolbox\";\nconsole.log(convertHslToHex);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertHslToHex",
      "kind": "VariableDeclaration",
      "signature": "convertHslToHex",
      "starter": "import { convertHslToHex } from \"nhb-toolbox\";\nconsole.log(convertHslToHex);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertHslToRgb",
      "kind": "VariableDeclaration",
      "signature": "convertHslToRgb",
      "starter": "import { convertHslToRgb } from \"nhb-toolbox\";\nconsole.log(convertHslToRgb);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertHslToRgb",
      "kind": "VariableDeclaration",
      "signature": "convertHslToRgb",
      "starter": "import { convertHslToRgb } from \"nhb-toolbox\";\nconsole.log(convertHslToRgb);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertIntoFormData",
      "kind": "VariableDeclaration",
      "signature": "convertIntoFormData",
      "starter": "import { convertIntoFormData } from \"nhb-toolbox\";\nconsole.log(convertIntoFormData);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertNumberToCurrency",
      "kind": "VariableDeclaration",
      "signature": "convertNumberToCurrency",
      "starter": "import { convertNumberToCurrency } from \"nhb-toolbox\";\nconsole.log(convertNumberToCurrency);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertNumberToOrdinal",
      "kind": "VariableDeclaration",
      "signature": "convertNumberToOrdinal",
      "starter": "import { convertNumberToOrdinal } from \"nhb-toolbox\";\nconsole.log(convertNumberToOrdinal);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertRgbaToHex8",
      "kind": "VariableDeclaration",
      "signature": "convertRgbaToHex8",
      "starter": "import { convertRgbaToHex8 } from \"nhb-toolbox\";\nconsole.log(convertRgbaToHex8);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertRgbaToHex8",
      "kind": "VariableDeclaration",
      "signature": "convertRgbaToHex8",
      "starter": "import { convertRgbaToHex8 } from \"nhb-toolbox\";\nconsole.log(convertRgbaToHex8);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertRgbaToHsla",
      "kind": "VariableDeclaration",
      "signature": "convertRgbaToHsla",
      "starter": "import { convertRgbaToHsla } from \"nhb-toolbox\";\nconsole.log(convertRgbaToHsla);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertRgbaToHsla",
      "kind": "VariableDeclaration",
      "signature": "convertRgbaToHsla",
      "starter": "import { convertRgbaToHsla } from \"nhb-toolbox\";\nconsole.log(convertRgbaToHsla);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertRgbToHex",
      "kind": "VariableDeclaration",
      "signature": "convertRgbToHex",
      "starter": "import { convertRgbToHex } from \"nhb-toolbox\";\nconsole.log(convertRgbToHex);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertRgbToHex",
      "kind": "VariableDeclaration",
      "signature": "convertRgbToHex",
      "starter": "import { convertRgbToHex } from \"nhb-toolbox\";\nconsole.log(convertRgbToHex);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertRgbToHsl",
      "kind": "VariableDeclaration",
      "signature": "convertRgbToHsl",
      "starter": "import { convertRgbToHsl } from \"nhb-toolbox\";\nconsole.log(convertRgbToHsl);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertRgbToHsl",
      "kind": "VariableDeclaration",
      "signature": "convertRgbToHsl",
      "starter": "import { convertRgbToHsl } from \"nhb-toolbox\";\nconsole.log(convertRgbToHsl);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertRgbToRgba",
      "kind": "VariableDeclaration",
      "signature": "convertRgbToRgba",
      "starter": "import { convertRgbToRgba } from \"nhb-toolbox\";\nconsole.log(convertRgbToRgba);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertRgbToRgba",
      "kind": "VariableDeclaration",
      "signature": "convertRgbToRgba",
      "starter": "import { convertRgbToRgba } from \"nhb-toolbox\";\nconsole.log(convertRgbToRgba);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/convert.d.ts"
    },
    {
      "name": "convertToDecimal",
      "kind": "VariableDeclaration",
      "signature": "convertToDecimal",
      "starter": "import { convertToDecimal } from \"nhb-toolbox\";\nconsole.log(convertToDecimal);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertToDecimal",
      "kind": "VariableDeclaration",
      "signature": "convertToDecimal",
      "starter": "import { convertToDecimal } from \"nhb-toolbox\";\nconsole.log(convertToDecimal);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/basics.d.ts"
    },
    {
      "name": "convertToFixed",
      "kind": "VariableDeclaration",
      "signature": "convertToFixed",
      "starter": "import { convertToFixed } from \"nhb-toolbox\";\nconsole.log(convertToFixed);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertToOrdinal",
      "kind": "VariableDeclaration",
      "signature": "convertToOrdinal",
      "starter": "import { convertToOrdinal } from \"nhb-toolbox\";\nconsole.log(convertToOrdinal);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertToRomanNumerals",
      "kind": "VariableDeclaration",
      "signature": "convertToRomanNumerals",
      "starter": "import { convertToRomanNumerals } from \"nhb-toolbox\";\nconsole.log(convertToRomanNumerals);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "convertToRomanNumerals",
      "kind": "VariableDeclaration",
      "signature": "convertToRomanNumerals",
      "starter": "import { convertToRomanNumerals } from \"nhb-toolbox\";\nconsole.log(convertToRomanNumerals);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/convert.d.ts"
    },
    {
      "name": "countObjectFields",
      "kind": "VariableDeclaration",
      "signature": "countObjectFields",
      "starter": "import { countObjectFields } from \"nhb-toolbox\";\nconsole.log(countObjectFields);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "countObjectFields",
      "kind": "VariableDeclaration",
      "signature": "countObjectFields",
      "starter": "import { countObjectFields } from \"nhb-toolbox\";\nconsole.log(countObjectFields);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/basics.d.ts"
    },
    {
      "name": "createControlledFormData",
      "kind": "VariableDeclaration",
      "signature": "createControlledFormData",
      "starter": "import { createControlledFormData } from \"nhb-toolbox\";\nconsole.log(createControlledFormData);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "createControlledFormData",
      "kind": "VariableDeclaration",
      "signature": "createControlledFormData",
      "starter": "import { createControlledFormData } from \"nhb-toolbox\";\nconsole.log(createControlledFormData);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/form/convert.d.ts"
    },
    {
      "name": "createFormData",
      "kind": "VariableDeclaration",
      "signature": "createFormData",
      "starter": "import { createFormData } from \"nhb-toolbox\";\nconsole.log(createFormData);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "createQueryParams",
      "kind": "VariableDeclaration",
      "signature": "createQueryParams",
      "starter": "import { createQueryParams } from \"nhb-toolbox\";\nconsole.log(createQueryParams);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "dayPartPlugin",
      "kind": "VariableDeclaration",
      "signature": "dayPartPlugin",
      "starter": "import { dayPartPlugin } from \"nhb-toolbox\";\nconsole.log(dayPartPlugin);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/plugins/dayPartPlugin.d.ts"
    },
    {
      "name": "DAYS",
      "kind": "VariableDeclaration",
      "signature": "DAYS",
      "starter": "import { DAYS } from \"nhb-toolbox\";\nconsole.log(DAYS);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/constants.d.ts"
    },
    {
      "name": "extractAlphaColorValues",
      "kind": "VariableDeclaration",
      "signature": "extractAlphaColorValues",
      "starter": "import { extractAlphaColorValues } from \"nhb-toolbox\";\nconsole.log(extractAlphaColorValues);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractAlphaColorValues",
      "kind": "VariableDeclaration",
      "signature": "extractAlphaColorValues",
      "starter": "import { extractAlphaColorValues } from \"nhb-toolbox\";\nconsole.log(extractAlphaColorValues);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/utils.d.ts"
    },
    {
      "name": "extractNewFields",
      "kind": "VariableDeclaration",
      "signature": "extractNewFields",
      "starter": "import { extractNewFields } from \"nhb-toolbox\";\nconsole.log(extractNewFields);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractNewFields",
      "kind": "VariableDeclaration",
      "signature": "extractNewFields",
      "starter": "import { extractNewFields } from \"nhb-toolbox\";\nconsole.log(extractNewFields);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/objectify.d.ts"
    },
    {
      "name": "extractNumbers",
      "kind": "VariableDeclaration",
      "signature": "extractNumbers",
      "starter": "import { extractNumbers } from \"nhb-toolbox\";\nconsole.log(extractNumbers);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractNumbersFromString",
      "kind": "VariableDeclaration",
      "signature": "extractNumbersFromString",
      "starter": "import { extractNumbersFromString } from \"nhb-toolbox\";\nconsole.log(extractNumbersFromString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractNumbersFromString",
      "kind": "VariableDeclaration",
      "signature": "extractNumbersFromString",
      "starter": "import { extractNumbersFromString } from \"nhb-toolbox\";\nconsole.log(extractNumbersFromString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/utilities.d.ts"
    },
    {
      "name": "extractSolidColorValues",
      "kind": "VariableDeclaration",
      "signature": "extractSolidColorValues",
      "starter": "import { extractSolidColorValues } from \"nhb-toolbox\";\nconsole.log(extractSolidColorValues);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractSolidColorValues",
      "kind": "VariableDeclaration",
      "signature": "extractSolidColorValues",
      "starter": "import { extractSolidColorValues } from \"nhb-toolbox\";\nconsole.log(extractSolidColorValues);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/utils.d.ts"
    },
    {
      "name": "extractUpdatedAndNewFields",
      "kind": "VariableDeclaration",
      "signature": "extractUpdatedAndNewFields",
      "starter": "import { extractUpdatedAndNewFields } from \"nhb-toolbox\";\nconsole.log(extractUpdatedAndNewFields);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractUpdatedAndNewFields",
      "kind": "VariableDeclaration",
      "signature": "extractUpdatedAndNewFields",
      "starter": "import { extractUpdatedAndNewFields } from \"nhb-toolbox\";\nconsole.log(extractUpdatedAndNewFields);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/objectify.d.ts"
    },
    {
      "name": "extractUpdatedFields",
      "kind": "VariableDeclaration",
      "signature": "extractUpdatedFields",
      "starter": "import { extractUpdatedFields } from \"nhb-toolbox\";\nconsole.log(extractUpdatedFields);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "extractUpdatedFields",
      "kind": "VariableDeclaration",
      "signature": "extractUpdatedFields",
      "starter": "import { extractUpdatedFields } from \"nhb-toolbox\";\nconsole.log(extractUpdatedFields);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/objectify.d.ts"
    },
    {
      "name": "filterArrayOfObjects",
      "kind": "VariableDeclaration",
      "signature": "filterArrayOfObjects",
      "starter": "import { filterArrayOfObjects } from \"nhb-toolbox\";\nconsole.log(filterArrayOfObjects);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "filterArrayOfObjects",
      "kind": "VariableDeclaration",
      "signature": "filterArrayOfObjects",
      "starter": "import { filterArrayOfObjects } from \"nhb-toolbox\";\nconsole.log(filterArrayOfObjects);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/basics.d.ts"
    },
    {
      "name": "findPrimeNumbers",
      "kind": "VariableDeclaration",
      "signature": "findPrimeNumbers",
      "starter": "import { findPrimeNumbers } from \"nhb-toolbox\";\nconsole.log(findPrimeNumbers);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "findPrimeNumbers",
      "kind": "VariableDeclaration",
      "signature": "findPrimeNumbers",
      "starter": "import { findPrimeNumbers } from \"nhb-toolbox\";\nconsole.log(findPrimeNumbers);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/prime.d.ts"
    },
    {
      "name": "flattenArray",
      "kind": "VariableDeclaration",
      "signature": "flattenArray",
      "starter": "import { flattenArray } from \"nhb-toolbox\";\nconsole.log(flattenArray);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "flattenArray",
      "kind": "VariableDeclaration",
      "signature": "flattenArray",
      "starter": "import { flattenArray } from \"nhb-toolbox\";\nconsole.log(flattenArray);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/basics.d.ts"
    },
    {
      "name": "flattenObjectDotNotation",
      "kind": "VariableDeclaration",
      "signature": "flattenObjectDotNotation",
      "starter": "import { flattenObjectDotNotation } from \"nhb-toolbox\";\nconsole.log(flattenObjectDotNotation);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "flattenObjectDotNotation",
      "kind": "VariableDeclaration",
      "signature": "flattenObjectDotNotation",
      "starter": "import { flattenObjectDotNotation } from \"nhb-toolbox\";\nconsole.log(flattenObjectDotNotation);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/objectify.d.ts"
    },
    {
      "name": "flattenObjectKeyValue",
      "kind": "VariableDeclaration",
      "signature": "flattenObjectKeyValue",
      "starter": "import { flattenObjectKeyValue } from \"nhb-toolbox\";\nconsole.log(flattenObjectKeyValue);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "flattenObjectKeyValue",
      "kind": "VariableDeclaration",
      "signature": "flattenObjectKeyValue",
      "starter": "import { flattenObjectKeyValue } from \"nhb-toolbox\";\nconsole.log(flattenObjectKeyValue);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/objectify.d.ts"
    },
    {
      "name": "formatCurrency",
      "kind": "VariableDeclaration",
      "signature": "formatCurrency",
      "starter": "import { formatCurrency } from \"nhb-toolbox\";\nconsole.log(formatCurrency);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "formatCurrency",
      "kind": "VariableDeclaration",
      "signature": "formatCurrency",
      "starter": "import { formatCurrency } from \"nhb-toolbox\";\nconsole.log(formatCurrency);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/utilities.d.ts"
    },
    {
      "name": "formatQueryParams",
      "kind": "VariableDeclaration",
      "signature": "formatQueryParams",
      "starter": "import { formatQueryParams } from \"nhb-toolbox\";\nconsole.log(formatQueryParams);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "fromNowPlugin",
      "kind": "VariableDeclaration",
      "signature": "fromNowPlugin",
      "starter": "import { fromNowPlugin } from \"nhb-toolbox\";\nconsole.log(fromNowPlugin);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/plugins/fromNowPlugin.d.ts"
    },
    {
      "name": "generateQueryParams",
      "kind": "VariableDeclaration",
      "signature": "generateQueryParams",
      "starter": "import { generateQueryParams } from \"nhb-toolbox\";\nconsole.log(generateQueryParams);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "generateQueryParams",
      "kind": "VariableDeclaration",
      "signature": "generateQueryParams",
      "starter": "import { generateQueryParams } from \"nhb-toolbox\";\nconsole.log(generateQueryParams);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/query.d.ts"
    },
    {
      "name": "generateRandomColorInHexRGB",
      "kind": "VariableDeclaration",
      "signature": "generateRandomColorInHexRGB",
      "starter": "import { generateRandomColorInHexRGB } from \"nhb-toolbox\";\nconsole.log(generateRandomColorInHexRGB);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "generateRandomColorInHexRGB",
      "kind": "VariableDeclaration",
      "signature": "generateRandomColorInHexRGB",
      "starter": "import { generateRandomColorInHexRGB } from \"nhb-toolbox\";\nconsole.log(generateRandomColorInHexRGB);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/random.d.ts"
    },
    {
      "name": "generateRandomHSLColor",
      "kind": "VariableDeclaration",
      "signature": "generateRandomHSLColor",
      "starter": "import { generateRandomHSLColor } from \"nhb-toolbox\";\nconsole.log(generateRandomHSLColor);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "generateRandomHSLColor",
      "kind": "VariableDeclaration",
      "signature": "generateRandomHSLColor",
      "starter": "import { generateRandomHSLColor } from \"nhb-toolbox\";\nconsole.log(generateRandomHSLColor);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/colors/random.d.ts"
    },
    {
      "name": "generateRandomID",
      "kind": "VariableDeclaration",
      "signature": "generateRandomID",
      "starter": "import { generateRandomID } from \"nhb-toolbox\";\nconsole.log(generateRandomID);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "generateRandomID",
      "kind": "VariableDeclaration",
      "signature": "generateRandomID",
      "starter": "import { generateRandomID } from \"nhb-toolbox\";\nconsole.log(generateRandomID);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/basics.d.ts"
    },
    {
      "name": "getFromLocalStorage",
      "kind": "VariableDeclaration",
      "signature": "getFromLocalStorage",
      "starter": "import { getFromLocalStorage } from \"nhb-toolbox\";\nconsole.log(getFromLocalStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getFromLocalStorage",
      "kind": "VariableDeclaration",
      "signature": "getFromLocalStorage",
      "starter": "import { getFromLocalStorage } from \"nhb-toolbox\";\nconsole.log(getFromLocalStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/storage.d.ts"
    },
    {
      "name": "getFromSessionStorage",
      "kind": "VariableDeclaration",
      "signature": "getFromSessionStorage",
      "starter": "import { getFromSessionStorage } from \"nhb-toolbox\";\nconsole.log(getFromSessionStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getFromSessionStorage",
      "kind": "VariableDeclaration",
      "signature": "getFromSessionStorage",
      "starter": "import { getFromSessionStorage } from \"nhb-toolbox\";\nconsole.log(getFromSessionStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/storage.d.ts"
    },
    {
      "name": "getLastArrayElement",
      "kind": "VariableDeclaration",
      "signature": "getLastArrayElement",
      "starter": "import { getLastArrayElement } from \"nhb-toolbox\";\nconsole.log(getLastArrayElement);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getLastArrayElement",
      "kind": "VariableDeclaration",
      "signature": "getLastArrayElement",
      "starter": "import { getLastArrayElement } from \"nhb-toolbox\";\nconsole.log(getLastArrayElement);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/basics.d.ts"
    },
    {
      "name": "getLevenshteinDistance",
      "kind": "VariableDeclaration",
      "signature": "getLevenshteinDistance",
      "starter": "import { getLevenshteinDistance } from \"nhb-toolbox\";\nconsole.log(getLevenshteinDistance);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getLevenshteinDistance",
      "kind": "VariableDeclaration",
      "signature": "getLevenshteinDistance",
      "starter": "import { getLevenshteinDistance } from \"nhb-toolbox\";\nconsole.log(getLevenshteinDistance);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/utilities.d.ts"
    },
    {
      "name": "getOrdinal",
      "kind": "VariableDeclaration",
      "signature": "getOrdinal",
      "starter": "import { getOrdinal } from \"nhb-toolbox\";\nconsole.log(getOrdinal);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getOrdinal",
      "kind": "VariableDeclaration",
      "signature": "getOrdinal",
      "starter": "import { getOrdinal } from \"nhb-toolbox\";\nconsole.log(getOrdinal);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/utilities.d.ts"
    },
    {
      "name": "getOrdinalNumber",
      "kind": "VariableDeclaration",
      "signature": "getOrdinalNumber",
      "starter": "import { getOrdinalNumber } from \"nhb-toolbox\";\nconsole.log(getOrdinalNumber);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getPrimeNumbers",
      "kind": "VariableDeclaration",
      "signature": "getPrimeNumbers",
      "starter": "import { getPrimeNumbers } from \"nhb-toolbox\";\nconsole.log(getPrimeNumbers);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getQueryStringAsObject",
      "kind": "VariableDeclaration",
      "signature": "getQueryStringAsObject",
      "starter": "import { getQueryStringAsObject } from \"nhb-toolbox\";\nconsole.log(getQueryStringAsObject);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getRandomDecimal",
      "kind": "VariableDeclaration",
      "signature": "getRandomDecimal",
      "starter": "import { getRandomDecimal } from \"nhb-toolbox\";\nconsole.log(getRandomDecimal);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getRandomFloat",
      "kind": "VariableDeclaration",
      "signature": "getRandomFloat",
      "starter": "import { getRandomFloat } from \"nhb-toolbox\";\nconsole.log(getRandomFloat);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getRandomFloat",
      "kind": "VariableDeclaration",
      "signature": "getRandomFloat",
      "starter": "import { getRandomFloat } from \"nhb-toolbox\";\nconsole.log(getRandomFloat);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/utilities.d.ts"
    },
    {
      "name": "getRandomInt",
      "kind": "VariableDeclaration",
      "signature": "getRandomInt",
      "starter": "import { getRandomInt } from \"nhb-toolbox\";\nconsole.log(getRandomInt);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getRandomNumber",
      "kind": "VariableDeclaration",
      "signature": "getRandomNumber",
      "starter": "import { getRandomNumber } from \"nhb-toolbox\";\nconsole.log(getRandomNumber);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "getRandomNumber",
      "kind": "VariableDeclaration",
      "signature": "getRandomNumber",
      "starter": "import { getRandomNumber } from \"nhb-toolbox\";\nconsole.log(getRandomNumber);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/basics.d.ts"
    },
    {
      "name": "httpStatus",
      "kind": "VariableDeclaration",
      "signature": "httpStatus",
      "starter": "import { httpStatus } from \"nhb-toolbox\";\nconsole.log(httpStatus);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "httpStatus",
      "kind": "VariableDeclaration",
      "signature": "httpStatus",
      "starter": "import { httpStatus } from \"nhb-toolbox\";\nconsole.log(httpStatus);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/http-status/HttpStatus.d.ts"
    },
    {
      "name": "integerToRoman",
      "kind": "VariableDeclaration",
      "signature": "integerToRoman",
      "starter": "import { integerToRoman } from \"nhb-toolbox\";\nconsole.log(integerToRoman);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "INTERNALS",
      "kind": "VariableDeclaration",
      "signature": "INTERNALS",
      "starter": "import { INTERNALS } from \"nhb-toolbox\";\nconsole.log(INTERNALS);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "INTERNALS",
      "kind": "VariableDeclaration",
      "signature": "INTERNALS",
      "starter": "import { INTERNALS } from \"nhb-toolbox\";\nconsole.log(INTERNALS);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/constants.d.ts"
    },
    {
      "name": "irregularRules",
      "kind": "VariableDeclaration",
      "signature": "irregularRules",
      "starter": "import { irregularRules } from \"nhb-toolbox\";\nconsole.log(irregularRules);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/pluralize/rules.d.ts"
    },
    {
      "name": "isDeepEqual",
      "kind": "VariableDeclaration",
      "signature": "isDeepEqual",
      "starter": "import { isDeepEqual } from \"nhb-toolbox\";\nconsole.log(isDeepEqual);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isDeepEqual",
      "kind": "VariableDeclaration",
      "signature": "isDeepEqual",
      "starter": "import { isDeepEqual } from \"nhb-toolbox\";\nconsole.log(isDeepEqual);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "isEven",
      "kind": "VariableDeclaration",
      "signature": "isEven",
      "starter": "import { isEven } from \"nhb-toolbox\";\nconsole.log(isEven);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isEven",
      "kind": "VariableDeclaration",
      "signature": "isEven",
      "starter": "import { isEven } from \"nhb-toolbox\";\nconsole.log(isEven);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/guards.d.ts"
    },
    {
      "name": "isEvenNumber",
      "kind": "VariableDeclaration",
      "signature": "isEvenNumber",
      "starter": "import { isEvenNumber } from \"nhb-toolbox\";\nconsole.log(isEvenNumber);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isInvalidOrEmptyArray",
      "kind": "VariableDeclaration",
      "signature": "isInvalidOrEmptyArray",
      "starter": "import { isInvalidOrEmptyArray } from \"nhb-toolbox\";\nconsole.log(isInvalidOrEmptyArray);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isInvalidOrEmptyArray",
      "kind": "VariableDeclaration",
      "signature": "isInvalidOrEmptyArray",
      "starter": "import { isInvalidOrEmptyArray } from \"nhb-toolbox\";\nconsole.log(isInvalidOrEmptyArray);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/basics.d.ts"
    },
    {
      "name": "isMethod",
      "kind": "VariableDeclaration",
      "signature": "isMethod",
      "starter": "import { isMethod } from \"nhb-toolbox\";\nconsole.log(isMethod);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isMethodDescriptor",
      "kind": "VariableDeclaration",
      "signature": "isMethodDescriptor",
      "starter": "import { isMethodDescriptor } from \"nhb-toolbox\";\nconsole.log(isMethodDescriptor);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isMethodDescriptor",
      "kind": "VariableDeclaration",
      "signature": "isMethodDescriptor",
      "starter": "import { isMethodDescriptor } from \"nhb-toolbox\";\nconsole.log(isMethodDescriptor);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/guards/non-primitives.d.ts"
    },
    {
      "name": "isMultiple",
      "kind": "VariableDeclaration",
      "signature": "isMultiple",
      "starter": "import { isMultiple } from \"nhb-toolbox\";\nconsole.log(isMultiple);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isMultiple",
      "kind": "VariableDeclaration",
      "signature": "isMultiple",
      "starter": "import { isMultiple } from \"nhb-toolbox\";\nconsole.log(isMultiple);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/guards.d.ts"
    },
    {
      "name": "isOdd",
      "kind": "VariableDeclaration",
      "signature": "isOdd",
      "starter": "import { isOdd } from \"nhb-toolbox\";\nconsole.log(isOdd);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isOdd",
      "kind": "VariableDeclaration",
      "signature": "isOdd",
      "starter": "import { isOdd } from \"nhb-toolbox\";\nconsole.log(isOdd);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/guards.d.ts"
    },
    {
      "name": "isOddNumber",
      "kind": "VariableDeclaration",
      "signature": "isOddNumber",
      "starter": "import { isOddNumber } from \"nhb-toolbox\";\nconsole.log(isOddNumber);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isPalindrome",
      "kind": "VariableDeclaration",
      "signature": "isPalindrome",
      "starter": "import { isPalindrome } from \"nhb-toolbox\";\nconsole.log(isPalindrome);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isPalindrome",
      "kind": "VariableDeclaration",
      "signature": "isPalindrome",
      "starter": "import { isPalindrome } from \"nhb-toolbox\";\nconsole.log(isPalindrome);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/guards.d.ts"
    },
    {
      "name": "isPrime",
      "kind": "VariableDeclaration",
      "signature": "isPrime",
      "starter": "import { isPrime } from \"nhb-toolbox\";\nconsole.log(isPrime);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isPrime",
      "kind": "VariableDeclaration",
      "signature": "isPrime",
      "starter": "import { isPrime } from \"nhb-toolbox\";\nconsole.log(isPrime);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/prime.d.ts"
    },
    {
      "name": "isPrimeNumber",
      "kind": "VariableDeclaration",
      "signature": "isPrimeNumber",
      "starter": "import { isPrimeNumber } from \"nhb-toolbox\";\nconsole.log(isPrimeNumber);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "isValidEmptyArray",
      "kind": "VariableDeclaration",
      "signature": "isValidEmptyArray",
      "starter": "import { isValidEmptyArray } from \"nhb-toolbox\";\nconsole.log(isValidEmptyArray);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "levenshteinDistance",
      "kind": "VariableDeclaration",
      "signature": "levenshteinDistance",
      "starter": "import { levenshteinDistance } from \"nhb-toolbox\";\nconsole.log(levenshteinDistance);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "LOWERCASE",
      "kind": "VariableDeclaration",
      "signature": "LOWERCASE",
      "starter": "import { LOWERCASE } from \"nhb-toolbox\";\nconsole.log(LOWERCASE);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/constants.d.ts"
    },
    {
      "name": "maskString",
      "kind": "VariableDeclaration",
      "signature": "maskString",
      "starter": "import { maskString } from \"nhb-toolbox\";\nconsole.log(maskString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "maskString",
      "kind": "VariableDeclaration",
      "signature": "maskString",
      "starter": "import { maskString } from \"nhb-toolbox\";\nconsole.log(maskString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/convert.d.ts"
    },
    {
      "name": "mergeAndFlattenObjects",
      "kind": "VariableDeclaration",
      "signature": "mergeAndFlattenObjects",
      "starter": "import { mergeAndFlattenObjects } from \"nhb-toolbox\";\nconsole.log(mergeAndFlattenObjects);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "mergeAndFlattenObjects",
      "kind": "VariableDeclaration",
      "signature": "mergeAndFlattenObjects",
      "starter": "import { mergeAndFlattenObjects } from \"nhb-toolbox\";\nconsole.log(mergeAndFlattenObjects);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/objectify.d.ts"
    },
    {
      "name": "mergeObjects",
      "kind": "VariableDeclaration",
      "signature": "mergeObjects",
      "starter": "import { mergeObjects } from \"nhb-toolbox\";\nconsole.log(mergeObjects);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "mergeObjects",
      "kind": "VariableDeclaration",
      "signature": "mergeObjects",
      "starter": "import { mergeObjects } from \"nhb-toolbox\";\nconsole.log(mergeObjects);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/objectify.d.ts"
    },
    {
      "name": "MONTHS",
      "kind": "VariableDeclaration",
      "signature": "MONTHS",
      "starter": "import { MONTHS } from \"nhb-toolbox\";\nconsole.log(MONTHS);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/constants.d.ts"
    },
    {
      "name": "MONTHS",
      "kind": "VariableDeclaration",
      "signature": "MONTHS",
      "starter": "import { MONTHS } from \"nhb-toolbox\";\nconsole.log(MONTHS);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/constants.d.ts"
    },
    {
      "name": "normalizeNumber",
      "kind": "VariableDeclaration",
      "signature": "normalizeNumber",
      "starter": "import { normalizeNumber } from \"nhb-toolbox\";\nconsole.log(normalizeNumber);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "normalizeNumber",
      "kind": "VariableDeclaration",
      "signature": "normalizeNumber",
      "starter": "import { normalizeNumber } from \"nhb-toolbox\";\nconsole.log(normalizeNumber);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/utilities.d.ts"
    },
    {
      "name": "numberToOrdinal",
      "kind": "VariableDeclaration",
      "signature": "numberToOrdinal",
      "starter": "import { numberToOrdinal } from \"nhb-toolbox\";\nconsole.log(numberToOrdinal);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "numberToRoman",
      "kind": "VariableDeclaration",
      "signature": "numberToRoman",
      "starter": "import { numberToRoman } from \"nhb-toolbox\";\nconsole.log(numberToRoman);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "numericToRoman",
      "kind": "VariableDeclaration",
      "signature": "numericToRoman",
      "starter": "import { numericToRoman } from \"nhb-toolbox\";\nconsole.log(numericToRoman);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "ONES",
      "kind": "VariableDeclaration",
      "signature": "ONES",
      "starter": "import { ONES } from \"nhb-toolbox\";\nconsole.log(ONES);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/constants.d.ts"
    },
    {
      "name": "palindromePlugin",
      "kind": "VariableDeclaration",
      "signature": "palindromePlugin",
      "starter": "import { palindromePlugin } from \"nhb-toolbox\";\nconsole.log(palindromePlugin);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/plugins/palindromePlugin.d.ts"
    },
    {
      "name": "parseJSON",
      "kind": "VariableDeclaration",
      "signature": "parseJSON",
      "starter": "import { parseJSON } from \"nhb-toolbox\";\nconsole.log(parseJSON);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "parseJSON",
      "kind": "VariableDeclaration",
      "signature": "parseJSON",
      "starter": "import { parseJSON } from \"nhb-toolbox\";\nconsole.log(parseJSON);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/utils/index.d.ts"
    },
    {
      "name": "parseJsonDeep",
      "kind": "VariableDeclaration",
      "signature": "parseJsonDeep",
      "starter": "import { parseJsonDeep } from \"nhb-toolbox\";\nconsole.log(parseJsonDeep);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "parseJsonToObject",
      "kind": "VariableDeclaration",
      "signature": "parseJsonToObject",
      "starter": "import { parseJsonToObject } from \"nhb-toolbox\";\nconsole.log(parseJsonToObject);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "parseJsonToObject",
      "kind": "VariableDeclaration",
      "signature": "parseJsonToObject",
      "starter": "import { parseJsonToObject } from \"nhb-toolbox\";\nconsole.log(parseJsonToObject);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/object/objectify.d.ts"
    },
    {
      "name": "parseNumbersFromText",
      "kind": "VariableDeclaration",
      "signature": "parseNumbersFromText",
      "starter": "import { parseNumbersFromText } from \"nhb-toolbox\";\nconsole.log(parseNumbersFromText);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "parseQueryString",
      "kind": "VariableDeclaration",
      "signature": "parseQueryString",
      "starter": "import { parseQueryString } from \"nhb-toolbox\";\nconsole.log(parseQueryString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "parseQueryString",
      "kind": "VariableDeclaration",
      "signature": "parseQueryString",
      "starter": "import { parseQueryString } from \"nhb-toolbox\";\nconsole.log(parseQueryString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/query.d.ts"
    },
    {
      "name": "pluralizer",
      "kind": "VariableDeclaration",
      "signature": "pluralizer",
      "starter": "import { pluralizer } from \"nhb-toolbox\";\nconsole.log(pluralizer);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "pluralizer",
      "kind": "VariableDeclaration",
      "signature": "pluralizer",
      "starter": "import { pluralizer } from \"nhb-toolbox\";\nconsole.log(pluralizer);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/pluralize/Pluralizer.d.ts"
    },
    {
      "name": "pluralRules",
      "kind": "VariableDeclaration",
      "signature": "pluralRules",
      "starter": "import { pluralRules } from \"nhb-toolbox\";\nconsole.log(pluralRules);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/pluralize/rules.d.ts"
    },
    {
      "name": "queryStringToObject",
      "kind": "VariableDeclaration",
      "signature": "queryStringToObject",
      "starter": "import { queryStringToObject } from \"nhb-toolbox\";\nconsole.log(queryStringToObject);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "relativeTimePlugin",
      "kind": "VariableDeclaration",
      "signature": "relativeTimePlugin",
      "starter": "import { relativeTimePlugin } from \"nhb-toolbox\";\nconsole.log(relativeTimePlugin);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/plugins/relativeTimePlugin.d.ts"
    },
    {
      "name": "removeFromLocalStorage",
      "kind": "VariableDeclaration",
      "signature": "removeFromLocalStorage",
      "starter": "import { removeFromLocalStorage } from \"nhb-toolbox\";\nconsole.log(removeFromLocalStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "removeFromLocalStorage",
      "kind": "VariableDeclaration",
      "signature": "removeFromLocalStorage",
      "starter": "import { removeFromLocalStorage } from \"nhb-toolbox\";\nconsole.log(removeFromLocalStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/storage.d.ts"
    },
    {
      "name": "removeFromSessionStorage",
      "kind": "VariableDeclaration",
      "signature": "removeFromSessionStorage",
      "starter": "import { removeFromSessionStorage } from \"nhb-toolbox\";\nconsole.log(removeFromSessionStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "removeFromSessionStorage",
      "kind": "VariableDeclaration",
      "signature": "removeFromSessionStorage",
      "starter": "import { removeFromSessionStorage } from \"nhb-toolbox\";\nconsole.log(removeFromSessionStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/storage.d.ts"
    },
    {
      "name": "replaceAllInString",
      "kind": "VariableDeclaration",
      "signature": "replaceAllInString",
      "starter": "import { replaceAllInString } from \"nhb-toolbox\";\nconsole.log(replaceAllInString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "replaceAllInString",
      "kind": "VariableDeclaration",
      "signature": "replaceAllInString",
      "starter": "import { replaceAllInString } from \"nhb-toolbox\";\nconsole.log(replaceAllInString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/convert.d.ts"
    },
    {
      "name": "reverseString",
      "kind": "VariableDeclaration",
      "signature": "reverseString",
      "starter": "import { reverseString } from \"nhb-toolbox\";\nconsole.log(reverseString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "reverseString",
      "kind": "VariableDeclaration",
      "signature": "reverseString",
      "starter": "import { reverseString } from \"nhb-toolbox\";\nconsole.log(reverseString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/convert.d.ts"
    },
    {
      "name": "roundNumberToNearestInterval",
      "kind": "VariableDeclaration",
      "signature": "roundNumberToNearestInterval",
      "starter": "import { roundNumberToNearestInterval } from \"nhb-toolbox\";\nconsole.log(roundNumberToNearestInterval);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "roundToNearest",
      "kind": "VariableDeclaration",
      "signature": "roundToNearest",
      "starter": "import { roundToNearest } from \"nhb-toolbox\";\nconsole.log(roundToNearest);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "roundToNearest",
      "kind": "VariableDeclaration",
      "signature": "roundToNearest",
      "starter": "import { roundToNearest } from \"nhb-toolbox\";\nconsole.log(roundToNearest);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/utilities.d.ts"
    },
    {
      "name": "roundToNearestInterval",
      "kind": "VariableDeclaration",
      "signature": "roundToNearestInterval",
      "starter": "import { roundToNearestInterval } from \"nhb-toolbox\";\nconsole.log(roundToNearestInterval);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "saveToLocalStorage",
      "kind": "VariableDeclaration",
      "signature": "saveToLocalStorage",
      "starter": "import { saveToLocalStorage } from \"nhb-toolbox\";\nconsole.log(saveToLocalStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "saveToLocalStorage",
      "kind": "VariableDeclaration",
      "signature": "saveToLocalStorage",
      "starter": "import { saveToLocalStorage } from \"nhb-toolbox\";\nconsole.log(saveToLocalStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/storage.d.ts"
    },
    {
      "name": "saveToSessionStorage",
      "kind": "VariableDeclaration",
      "signature": "saveToSessionStorage",
      "starter": "import { saveToSessionStorage } from \"nhb-toolbox\";\nconsole.log(saveToSessionStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "saveToSessionStorage",
      "kind": "VariableDeclaration",
      "signature": "saveToSessionStorage",
      "starter": "import { saveToSessionStorage } from \"nhb-toolbox\";\nconsole.log(saveToSessionStorage);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/dom/storage.d.ts"
    },
    {
      "name": "seasonPlugin",
      "kind": "VariableDeclaration",
      "signature": "seasonPlugin",
      "starter": "import { seasonPlugin } from \"nhb-toolbox\";\nconsole.log(seasonPlugin);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/plugins/seasonPlugin.d.ts"
    },
    {
      "name": "shuffleArray",
      "kind": "VariableDeclaration",
      "signature": "shuffleArray",
      "starter": "import { shuffleArray } from \"nhb-toolbox\";\nconsole.log(shuffleArray);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "shuffleArray",
      "kind": "VariableDeclaration",
      "signature": "shuffleArray",
      "starter": "import { shuffleArray } from \"nhb-toolbox\";\nconsole.log(shuffleArray);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/array/basics.d.ts"
    },
    {
      "name": "singularRules",
      "kind": "VariableDeclaration",
      "signature": "singularRules",
      "starter": "import { singularRules } from \"nhb-toolbox\";\nconsole.log(singularRules);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/pluralize/rules.d.ts"
    },
    {
      "name": "slugifyString",
      "kind": "VariableDeclaration",
      "signature": "slugifyString",
      "starter": "import { slugifyString } from \"nhb-toolbox\";\nconsole.log(slugifyString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "slugifyString",
      "kind": "VariableDeclaration",
      "signature": "slugifyString",
      "starter": "import { slugifyString } from \"nhb-toolbox\";\nconsole.log(slugifyString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/convert.d.ts"
    },
    {
      "name": "TEENS",
      "kind": "VariableDeclaration",
      "signature": "TEENS",
      "starter": "import { TEENS } from \"nhb-toolbox\";\nconsole.log(TEENS);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/constants.d.ts"
    },
    {
      "name": "TENS",
      "kind": "VariableDeclaration",
      "signature": "TENS",
      "starter": "import { TENS } from \"nhb-toolbox\";\nconsole.log(TENS);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/constants.d.ts"
    },
    {
      "name": "THOUSANDS",
      "kind": "VariableDeclaration",
      "signature": "THOUSANDS",
      "starter": "import { THOUSANDS } from \"nhb-toolbox\";\nconsole.log(THOUSANDS);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/constants.d.ts"
    },
    {
      "name": "timeZonePlugin",
      "kind": "VariableDeclaration",
      "signature": "timeZonePlugin",
      "starter": "import { timeZonePlugin } from \"nhb-toolbox\";\nconsole.log(timeZonePlugin);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/plugins/timeZonePlugin.d.ts"
    },
    {
      "name": "toRoman",
      "kind": "VariableDeclaration",
      "signature": "toRoman",
      "starter": "import { toRoman } from \"nhb-toolbox\";\nconsole.log(toRoman);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "toRomanNumeral",
      "kind": "VariableDeclaration",
      "signature": "toRomanNumeral",
      "starter": "import { toRomanNumeral } from \"nhb-toolbox\";\nconsole.log(toRomanNumeral);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "truncateString",
      "kind": "VariableDeclaration",
      "signature": "truncateString",
      "starter": "import { truncateString } from \"nhb-toolbox\";\nconsole.log(truncateString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/index.d.ts"
    },
    {
      "name": "truncateString",
      "kind": "VariableDeclaration",
      "signature": "truncateString",
      "starter": "import { truncateString } from \"nhb-toolbox\";\nconsole.log(truncateString);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/string/basics.d.ts"
    },
    {
      "name": "uncountables",
      "kind": "VariableDeclaration",
      "signature": "uncountables",
      "starter": "import { uncountables } from \"nhb-toolbox\";\nconsole.log(uncountables);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/pluralize/rules.d.ts"
    },
    {
      "name": "UNITS",
      "kind": "VariableDeclaration",
      "signature": "UNITS",
      "starter": "import { UNITS } from \"nhb-toolbox\";\nconsole.log(UNITS);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/number/constants.d.ts"
    },
    {
      "name": "zodiacPlugin",
      "kind": "VariableDeclaration",
      "signature": "zodiacPlugin",
      "starter": "import { zodiacPlugin } from \"nhb-toolbox\";\nconsole.log(zodiacPlugin);",
      "shortDoc": "",
      "path": "R:/Projects/Personal Projects/nhb-toolbox-docs/node_modules/nhb-toolbox/dist/dts/date/plugins/zodiacPlugin.d.ts"
    }
  ]
}